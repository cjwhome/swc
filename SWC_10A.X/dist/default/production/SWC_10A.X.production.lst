

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jan 15 07:59:43 2021

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	12F1840
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     	;# 
    27  0001                     	;# 
    28  0002                     	;# 
    29  0003                     	;# 
    30  0004                     	;# 
    31  0005                     	;# 
    32  0006                     	;# 
    33  0007                     	;# 
    34  0008                     	;# 
    35  0009                     	;# 
    36  000A                     	;# 
    37  000B                     	;# 
    38  000C                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0015                     	;# 
    42  0016                     	;# 
    43  0016                     	;# 
    44  0017                     	;# 
    45  0018                     	;# 
    46  0019                     	;# 
    47  001A                     	;# 
    48  001B                     	;# 
    49  001C                     	;# 
    50  001E                     	;# 
    51  001F                     	;# 
    52  008C                     	;# 
    53  0091                     	;# 
    54  0092                     	;# 
    55  0095                     	;# 
    56  0096                     	;# 
    57  0097                     	;# 
    58  0098                     	;# 
    59  0099                     	;# 
    60  009A                     	;# 
    61  009B                     	;# 
    62  009B                     	;# 
    63  009C                     	;# 
    64  009D                     	;# 
    65  009E                     	;# 
    66  010C                     	;# 
    67  0111                     	;# 
    68  0112                     	;# 
    69  0115                     	;# 
    70  0116                     	;# 
    71  0117                     	;# 
    72  0118                     	;# 
    73  0119                     	;# 
    74  011A                     	;# 
    75  011B                     	;# 
    76  011D                     	;# 
    77  011D                     	;# 
    78  018C                     	;# 
    79  0191                     	;# 
    80  0191                     	;# 
    81  0192                     	;# 
    82  0193                     	;# 
    83  0193                     	;# 
    84  0193                     	;# 
    85  0194                     	;# 
    86  0195                     	;# 
    87  0196                     	;# 
    88  0197                     	;# 
    89  0199                     	;# 
    90  019A                     	;# 
    91  019B                     	;# 
    92  019B                     	;# 
    93  019B                     	;# 
    94  019B                     	;# 
    95  019C                     	;# 
    96  019C                     	;# 
    97  019D                     	;# 
    98  019E                     	;# 
    99  019F                     	;# 
   100  020C                     	;# 
   101  0211                     	;# 
   102  0211                     	;# 
   103  0212                     	;# 
   104  0212                     	;# 
   105  0213                     	;# 
   106  0213                     	;# 
   107  0214                     	;# 
   108  0214                     	;# 
   109  0215                     	;# 
   110  0215                     	;# 
   111  0215                     	;# 
   112  0216                     	;# 
   113  0216                     	;# 
   114  0217                     	;# 
   115  0217                     	;# 
   116  0291                     	;# 
   117  0291                     	;# 
   118  0292                     	;# 
   119  0293                     	;# 
   120  0294                     	;# 
   121  0295                     	;# 
   122  0295                     	;# 
   123  0296                     	;# 
   124  0391                     	;# 
   125  0392                     	;# 
   126  0393                     	;# 
   127  039A                     	;# 
   128  039C                     	;# 
   129  039D                     	;# 
   130  039E                     	;# 
   131  039F                     	;# 
   132  0FE4                     	;# 
   133  0FE5                     	;# 
   134  0FE6                     	;# 
   135  0FE7                     	;# 
   136  0FE8                     	;# 
   137  0FE9                     	;# 
   138  0FEA                     	;# 
   139  0FEB                     	;# 
   140  0FED                     	;# 
   141  0FEE                     	;# 
   142  0FEF                     	;# 
   143                           
   144                           	psect	stringtext
   145  02DB                     __pstringtext:	
   146  02DB                     _dpowers:	
   147  02DB  3401               	retlw	1
   148  02DC  3400               	retlw	0
   149  02DD  3400               	retlw	0
   150  02DE  3400               	retlw	0
   151  02DF  340A               	retlw	10
   152  02E0  3400               	retlw	0
   153  02E1  3400               	retlw	0
   154  02E2  3400               	retlw	0
   155  02E3  3464               	retlw	100
   156  02E4  3400               	retlw	0
   157  02E5  3400               	retlw	0
   158  02E6  3400               	retlw	0
   159  02E7  34E8               	retlw	232
   160  02E8  3403               	retlw	3
   161  02E9  3400               	retlw	0
   162  02EA  3400               	retlw	0
   163  02EB  3410               	retlw	16
   164  02EC  3427               	retlw	39
   165  02ED  3400               	retlw	0
   166  02EE  3400               	retlw	0
   167  02EF  34A0               	retlw	160
   168  02F0  3486               	retlw	134
   169  02F1  3401               	retlw	1
   170  02F2  3400               	retlw	0
   171  02F3  3440               	retlw	64
   172  02F4  3442               	retlw	66
   173  02F5  340F               	retlw	15
   174  02F6  3400               	retlw	0
   175  02F7  3480               	retlw	128
   176  02F8  3496               	retlw	150
   177  02F9  3498               	retlw	152
   178  02FA  3400               	retlw	0
   179  02FB  3400               	retlw	0
   180  02FC  34E1               	retlw	225
   181  02FD  34F5               	retlw	245
   182  02FE  3405               	retlw	5
   183  02FF  3400               	retlw	0
   184  0300  34CA               	retlw	202
   185  0301  349A               	retlw	154
   186  0302  343B               	retlw	59
   187  0303                     __end_of_dpowers:	
   188  0011                     _PIR1	set	17
   189  001B                     _PR2	set	27
   190  001C                     _T2CON	set	28
   191  005F                     _GIE	set	95
   192  005E                     _PEIE	set	94
   193  008D                     _RCIF	set	141
   194  008B                     _SSP1IF	set	139
   195  008C                     _TXIF	set	140
   196  009D                     _ADCON0	set	157
   197  009D                     _ADCON0bits	set	157
   198  009E                     _ADCON1	set	158
   199  009C                     _ADRESH	set	156
   200  009B                     _ADRESL	set	155
   201  0099                     _OSCCON	set	153
   202  0098                     _OSCTUNE	set	152
   203  008C                     _TRISA	set	140
   204  048D                     _RCIE	set	1165
   205  0461                     _TRISA1	set	1121
   206  0462                     _TRISA2	set	1122
   207  0464                     _TRISA4	set	1124
   208  0465                     _TRISA5	set	1125
   209  011D                     _APFCON	set	285
   210  08EF                     _RXDTSEL	set	2287
   211  08EA                     _TXCKSEL	set	2282
   212  018C                     _ANSELA	set	396
   213  0199                     _RCREG	set	409
   214  019D                     _RCSTA	set	413
   215  019C                     _SPBRGH	set	412
   216  019B                     _SPBRGL	set	411
   217  019A                     _TXREG	set	410
   218  0CEF                     _SPEN	set	3311
   219  0CF4                     _SYNC	set	3316
   220  0CF5                     _TXEN	set	3317
   221  0212                     _SSP1ADD	set	530
   222  0211                     _SSP1BUF	set	529
   223  10AC                     _CKP	set	4268
   224  10B0                     _SEN	set	4272
   225  10AD                     _SSPEN	set	4269
   226  10A8                     _SSPM0	set	4264
   227  10A9                     _SSPM1	set	4265
   228  10AA                     _SSPM2	set	4266
   229  10AB                     _SSPM3	set	4267
   230  0293                     _CCP1CON	set	659
   231  0291                     _CCPR1L	set	657
   232  0303                     STR_4:	
   233  0303  3448               	retlw	72	;'H'
   234  0304  3469               	retlw	105	;'i'
   235  0305  3467               	retlw	103	;'g'
   236  0306  3468               	retlw	104	;'h'
   237  0307  3420               	retlw	32	;' '
   238  0308  3463               	retlw	99	;'c'
   239  0309  346F               	retlw	111	;'o'
   240  030A  3475               	retlw	117	;'u'
   241  030B  346E               	retlw	110	;'n'
   242  030C  3474               	retlw	116	;'t'
   243  030D  343A               	retlw	58	;':'
   244  030E  3425               	retlw	37	;'%'
   245  030F  346C               	retlw	108	;'l'
   246  0310  3464               	retlw	100	;'d'
   247  0311  342C               	retlw	44	;','
   248  0312  3420               	retlw	32	;' '
   249  0313  3464               	retlw	100	;'d'
   250  0314  3475               	retlw	117	;'u'
   251  0315  3474               	retlw	116	;'t'
   252  0316  3479               	retlw	121	;'y'
   253  0317  3420               	retlw	32	;' '
   254  0318  3463               	retlw	99	;'c'
   255  0319  3479               	retlw	121	;'y'
   256  031A  3463               	retlw	99	;'c'
   257  031B  346C               	retlw	108	;'l'
   258  031C  3465               	retlw	101	;'e'
   259  031D  343A               	retlw	58	;':'
   260  031E  3425               	retlw	37	;'%'
   261  031F  3464               	retlw	100	;'d'
   262  0320  340A               	retlw	10
   263  0321  340D               	retlw	13
   264  0322  3400               	retlw	0
   265  0323                     STR_1:	
   266  0323  3453               	retlw	83	;'S'
   267  0324  3457               	retlw	87	;'W'
   268  0325  3443               	retlw	67	;'C'
   269  0326  3420               	retlw	32	;' '
   270  0327  3469               	retlw	105	;'i'
   271  0328  346E               	retlw	110	;'n'
   272  0329  3474               	retlw	116	;'t'
   273  032A  3465               	retlw	101	;'e'
   274  032B  3472               	retlw	114	;'r'
   275  032C  3466               	retlw	102	;'f'
   276  032D  3461               	retlw	97	;'a'
   277  032E  3463               	retlw	99	;'c'
   278  032F  3465               	retlw	101	;'e'
   279  0330  3420               	retlw	32	;' '
   280  0331  3466               	retlw	102	;'f'
   281  0332  3469               	retlw	105	;'i'
   282  0333  3472               	retlw	114	;'r'
   283  0334  346D               	retlw	109	;'m'
   284  0335  3477               	retlw	119	;'w'
   285  0336  3461               	retlw	97	;'a'
   286  0337  3472               	retlw	114	;'r'
   287  0338  3465               	retlw	101	;'e'
   288  0339  340D               	retlw	13
   289  033A  340A               	retlw	10
   290  033B  3400               	retlw	0
   291  033C                     STR_3:	
   292  033C  3452               	retlw	82	;'R'
   293  033D  3465               	retlw	101	;'e'
   294  033E  3461               	retlw	97	;'a'
   295  033F  3464               	retlw	100	;'d'
   296  0340  3469               	retlw	105	;'i'
   297  0341  346E               	retlw	110	;'n'
   298  0342  3467               	retlw	103	;'g'
   299  0343  3420               	retlw	32	;' '
   300  0344  3441               	retlw	65	;'A'
   301  0345  3444               	retlw	68	;'D'
   302  0346  3443               	retlw	67	;'C'
   303  0347  3420               	retlw	32	;' '
   304  0348  3463               	retlw	99	;'c'
   305  0349  3468               	retlw	104	;'h'
   306  034A  3461               	retlw	97	;'a'
   307  034B  346E               	retlw	110	;'n'
   308  034C  346E               	retlw	110	;'n'
   309  034D  3465               	retlw	101	;'e'
   310  034E  346C               	retlw	108	;'l'
   311  034F  3420               	retlw	32	;' '
   312  0350  3430               	retlw	48	;'0'
   313  0351  340A               	retlw	10
   314  0352  340D               	retlw	13
   315  0353  3400               	retlw	0
   316  0354                     STR_2:	
   317  0354  3467               	retlw	103	;'g'
   318  0355  346F               	retlw	111	;'o'
   319  0356  3474               	retlw	116	;'t'
   320  0357  3420               	retlw	32	;' '
   321  0358  3463               	retlw	99	;'c'
   322  0359  3468               	retlw	104	;'h'
   323  035A  3461               	retlw	97	;'a'
   324  035B  3472               	retlw	114	;'r'
   325  035C  343A               	retlw	58	;':'
   326  035D  3425               	retlw	37	;'%'
   327  035E  3463               	retlw	99	;'c'
   328  035F  340A               	retlw	10
   329  0360  340D               	retlw	13
   330  0361  3400               	retlw	0
   331                           
   332                           ; #config settings
   333  0000                     
   334                           	psect	cinit
   335  0035                     start_initialization:	
   336  0035                     __initialization:	
   337                           
   338                           ; Clear objects allocated to COMMON
   339  0035  01FB               	clrf	__pbssCOMMON& (0+127)
   340                           
   341                           ; Clear objects allocated to BANK0
   342  0036  3057               	movlw	low __pbssBANK0
   343  0037  0084               	movwf	4
   344  0038  3000               	movlw	high __pbssBANK0
   345  0039  0085               	movwf	5
   346  003A  3012               	movlw	18
   347  003B  3186  260E         	fcall	clear_ram0
   348  003D                     end_of_initialization:	
   349                           ;End of C runtime variable initialization code
   350                           
   351  003D                     __end_of__initialization:	
   352  003D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   353  003E  0020               	movlb	0
   354  003F  3185  2D07         	ljmp	_main	;jump to C main() function
   355                           
   356                           	psect	bssCOMMON
   357  007B                     __pbssCOMMON:	
   358  007B                     _error:	
   359  007B                     	ds	1
   360                           
   361                           	psect	bssBANK0
   362  0057                     __pbssBANK0:	
   363  0057                     _rcv_str:	
   364  0057                     	ds	14
   365  0065                     _got_serial_string:	
   366  0065                     	ds	2
   367  0067                     _rcv_char_index:	
   368  0067                     	ds	1
   369  0068                     _recieve_char:	
   370  0068                     	ds	1
   371                           
   372                           	psect	clrtext
   373  060E                     clear_ram0:	
   374                           ;	Called with FSR0 containing the base address, and
   375                           ;	WREG with the size to clear
   376                           
   377  060E  0064               	clrwdt	;clear the watchdog before getting into this loop
   378  060F                     clrloop0:	
   379  060F  0180               	clrf	0	;clear RAM location pointed to by FSR
   380  0610  3101               	addfsr 0,1
   381  0611  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   382  0612  2E0F               	goto	clrloop0	;have we reached the end yet?
   383  0613  3400               	retlw	0	;all done for this memory range, return
   384                           
   385                           	psect	cstackCOMMON
   386  0070                     __pcstackCOMMON:	
   387  0070                     ?_read_ADC0:	
   388  0070                     ?_getche:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_putch:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_REC_int:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ??_REC_int:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_init_pic12f1840:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_main:	
   404                           ; 1 bytes @ 0x0
   405                           
   406                           
   407                           ; 1 bytes @ 0x0
   408  0070                     	ds	2
   409  0072                     ??_getche:	
   410  0072                     ??_putch:	
   411                           ; 1 bytes @ 0x2
   412                           
   413  0072                     ??_init_pic12f1840:	
   414                           ; 1 bytes @ 0x2
   415                           
   416  0072                     ?_update_duty_cycle:	
   417                           ; 1 bytes @ 0x2
   418                           
   419  0072                     ?___ftpack:	
   420                           ; 1 bytes @ 0x2
   421                           
   422  0072                     ?___lldiv:	
   423                           ; 3 bytes @ 0x2
   424                           
   425  0072                     putch@data:	
   426                           ; 4 bytes @ 0x2
   427                           
   428  0072                     update_duty_cycle@duty:	
   429                           ; 1 bytes @ 0x2
   430                           
   431  0072                     ___ftpack@arg:	
   432                           ; 2 bytes @ 0x2
   433                           
   434  0072                     ___lldiv@divisor:	
   435                           ; 3 bytes @ 0x2
   436                           
   437                           
   438                           ; 4 bytes @ 0x2
   439  0072                     	ds	1
   440  0073                     init_pic12f1840@f:	
   441                           
   442                           ; 4 bytes @ 0x3
   443  0073                     	ds	1
   444  0074                     ??_update_duty_cycle:	
   445                           
   446                           ; 1 bytes @ 0x4
   447  0074                     	ds	1
   448  0075                     ___ftpack@exp:	
   449                           
   450                           ; 1 bytes @ 0x5
   451  0075                     	ds	1
   452  0076                     ___ftpack@sign:	
   453  0076                     update_duty_cycle@temp:	
   454                           ; 1 bytes @ 0x6
   455                           
   456  0076                     ___lldiv@dividend:	
   457                           ; 2 bytes @ 0x6
   458                           
   459                           
   460                           ; 4 bytes @ 0x6
   461  0076                     	ds	1
   462  0077                     ??___ftpack:	
   463                           
   464                           ; 1 bytes @ 0x7
   465  0077                     	ds	3
   466  007A                     ??___lldiv:	
   467                           
   468                           ; 1 bytes @ 0xA
   469  007A                     	ds	1
   470                           
   471                           	psect	cstackBANK0
   472  0020                     __pcstackBANK0:	
   473  0020                     ?___altoft:	
   474  0020                     ___altoft@c:	
   475                           ; 3 bytes @ 0x0
   476                           
   477  0020                     ___lldiv@quotient:	
   478                           ; 4 bytes @ 0x0
   479                           
   480                           
   481                           ; 4 bytes @ 0x0
   482  0020                     	ds	4
   483  0024                     ??___altoft:	
   484  0024                     ___lldiv@counter:	
   485                           ; 1 bytes @ 0x4
   486                           
   487                           
   488                           ; 1 bytes @ 0x4
   489  0024                     	ds	1
   490  0025                     ?___llmod:	
   491  0025                     ___llmod@divisor:	
   492                           ; 4 bytes @ 0x5
   493                           
   494                           
   495                           ; 4 bytes @ 0x5
   496  0025                     	ds	1
   497  0026                     ___altoft@exp:	
   498                           
   499                           ; 1 bytes @ 0x6
   500  0026                     	ds	1
   501  0027                     ___altoft@sign:	
   502                           
   503                           ; 1 bytes @ 0x7
   504  0027                     	ds	1
   505  0028                     ?___ftmul:	
   506  0028                     ___ftmul@f1:	
   507                           ; 3 bytes @ 0x8
   508                           
   509                           
   510                           ; 3 bytes @ 0x8
   511  0028                     	ds	1
   512  0029                     ___llmod@dividend:	
   513                           
   514                           ; 4 bytes @ 0x9
   515  0029                     	ds	2
   516  002B                     ___ftmul@f2:	
   517                           
   518                           ; 3 bytes @ 0xB
   519  002B                     	ds	2
   520  002D                     ??___llmod:	
   521                           
   522                           ; 1 bytes @ 0xD
   523  002D                     	ds	1
   524  002E                     ??___ftmul:	
   525  002E                     ___llmod@counter:	
   526                           ; 1 bytes @ 0xE
   527                           
   528                           
   529                           ; 1 bytes @ 0xE
   530  002E                     	ds	1
   531  002F                     ?_printf:	
   532  002F                     printf@f:	
   533                           ; 2 bytes @ 0xF
   534                           
   535                           
   536                           ; 2 bytes @ 0xF
   537  002F                     	ds	3
   538  0032                     ___ftmul@exp:	
   539                           
   540                           ; 1 bytes @ 0x12
   541  0032                     	ds	1
   542  0033                     ___ftmul@f3_as_product:	
   543                           
   544                           ; 3 bytes @ 0x13
   545  0033                     	ds	3
   546  0036                     ___ftmul@cntr:	
   547                           
   548                           ; 1 bytes @ 0x16
   549  0036                     	ds	1
   550  0037                     ??_printf:	
   551  0037                     ___ftmul@sign:	
   552                           ; 1 bytes @ 0x17
   553                           
   554                           
   555                           ; 1 bytes @ 0x17
   556  0037                     	ds	1
   557  0038                     ?___fttol:	
   558  0038                     ___fttol@f1:	
   559                           ; 4 bytes @ 0x18
   560                           
   561                           
   562                           ; 3 bytes @ 0x18
   563  0038                     	ds	4
   564  003C                     ??___fttol:	
   565                           
   566                           ; 1 bytes @ 0x1C
   567  003C                     	ds	1
   568  003D                     printf@prec:	
   569                           
   570                           ; 2 bytes @ 0x1D
   571  003D                     	ds	2
   572  003F                     printf@flag:	
   573                           
   574                           ; 1 bytes @ 0x1F
   575  003F                     	ds	1
   576  0040                     printf@ap:	
   577  0040                     ___fttol@sign1:	
   578                           ; 1 bytes @ 0x20
   579                           
   580                           
   581                           ; 1 bytes @ 0x20
   582  0040                     	ds	1
   583  0041                     printf@val:	
   584  0041                     ___fttol@lval:	
   585                           ; 4 bytes @ 0x21
   586                           
   587                           
   588                           ; 4 bytes @ 0x21
   589  0041                     	ds	4
   590  0045                     printf@c:	
   591  0045                     ___fttol@exp1:	
   592                           ; 1 bytes @ 0x25
   593                           
   594                           
   595                           ; 1 bytes @ 0x25
   596  0045                     	ds	1
   597  0046                     ??_read_ADC0:	
   598                           
   599                           ; 1 bytes @ 0x26
   600  0046                     	ds	1
   601  0047                     read_ADC0@i:	
   602                           
   603                           ; 4 bytes @ 0x27
   604  0047                     	ds	4
   605  004B                     read_ADC0@high_count:	
   606                           
   607                           ; 4 bytes @ 0x2B
   608  004B                     	ds	4
   609  004F                     read_ADC0@DoubleWord:	
   610                           
   611                           ; 2 bytes @ 0x2F
   612  004F                     	ds	2
   613  0051                     read_ADC0@duty_cycle:	
   614                           
   615                           ; 2 bytes @ 0x31
   616  0051                     	ds	2
   617  0053                     ??_main:	
   618                           
   619                           ; 1 bytes @ 0x33
   620  0053                     	ds	2
   621  0055                     main@command:	
   622                           
   623                           ; 1 bytes @ 0x35
   624  0055                     	ds	1
   625  0056                     main@address:	
   626                           
   627                           ; 1 bytes @ 0x36
   628  0056                     	ds	1
   629                           
   630                           	psect	maintext
   631  0507                     __pmaintext:	
   632 ;;
   633 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   634 ;;
   635 ;; *************** function _main *****************
   636 ;; Defined at:
   637 ;;		line 166 in file "main.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  a               4    0        long 
   642 ;;  i               2    0        int 
   643 ;;  count           2    0        int 
   644 ;;  address         1   54[BANK0 ] unsigned char 
   645 ;;  command         1   53[BANK0 ] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : B1F/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   655 ;;      Params:         0       0       0       0
   656 ;;      Locals:         0       2       0       0
   657 ;;      Temps:          0       2       0       0
   658 ;;      Totals:         0       4       0       0
   659 ;;Total ram usage:        4 bytes
   660 ;; Hardware stack levels required when called:    4
   661 ;; This function calls:
   662 ;;		_getche
   663 ;;		_init_pic12f1840
   664 ;;		_printf
   665 ;;		_read_ADC0
   666 ;;		_update_duty_cycle
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function _main
   674  0507                     _main:	
   675                           
   676                           ;main.c: 167: unsigned char address;
   677                           ;main.c: 168: int count, i;
   678                           ;main.c: 169: unsigned char command;
   679                           ;main.c: 170: long a;
   680                           ;main.c: 172: init_pic12f1840();
   681                           
   682                           ;incstack = 0
   683                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   684  0507  3183  23E9  3185   	fcall	_init_pic12f1840
   685                           
   686                           ;main.c: 173: got_serial_string = 0;
   687  050A  0020               	movlb	0	; select bank0
   688  050B  01E5               	clrf	_got_serial_string
   689  050C  01E6               	clrf	_got_serial_string+1
   690                           
   691                           ;main.c: 174: rcv_char_index = 0;
   692  050D  01E7               	clrf	_rcv_char_index
   693                           
   694                           ;main.c: 176: printf("SWC interface firmware\r\n");
   695  050E  3023               	movlw	low (STR_1| (0+32768))
   696  050F  00AF               	movwf	printf@f
   697  0510  3083               	movlw	high (STR_1| (0+32768))
   698  0511  00B0               	movwf	printf@f+1
   699  0512  3180  2041  3185   	fcall	_printf
   700                           
   701                           ;main.c: 178: update_duty_cycle(512);
   702  0515  3000               	movlw	0
   703  0516  00F2               	movwf	update_duty_cycle@duty
   704  0517  3002               	movlw	2
   705  0518  00F3               	movwf	update_duty_cycle@duty+1
   706  0519  3185  25D0  3185   	fcall	_update_duty_cycle
   707  051C                     l134:	
   708                           ;main.c: 181: while(1){
   709                           
   710                           
   711                           ;main.c: 183: read_ADC0();
   712  051C  3181  2154  3185   	fcall	_read_ADC0
   713                           
   714                           ;main.c: 185: recieve_char = getche();
   715  051F  3186  2614  3185   	fcall	_getche
   716  0522  0020               	movlb	0	; select bank0
   717  0523  00D3               	movwf	??_main
   718  0524  0853               	movf	??_main,w
   719  0525  00E8               	movwf	_recieve_char
   720                           
   721                           ;main.c: 186: printf("got char:%c\n\r", recieve_char);
   722  0526  3054               	movlw	low (STR_2| (0+32768))
   723  0527  00AF               	movwf	printf@f
   724  0528  3083               	movlw	high (STR_2| (0+32768))
   725  0529  00B0               	movwf	printf@f+1
   726  052A  0868               	movf	_recieve_char,w
   727  052B  00D3               	movwf	??_main
   728  052C  01D4               	clrf	??_main+1
   729  052D  0853               	movf	??_main,w
   730  052E  00B1               	movwf	?_printf+2
   731  052F  0854               	movf	??_main+1,w
   732  0530  00B2               	movwf	?_printf+3
   733  0531  3180  2041  3185   	fcall	_printf
   734                           
   735                           ;main.c: 188: if(SSP1IF){
   736  0534  0020               	movlb	0	; select bank0
   737  0535  1D91               	btfss	17,3	;volatile
   738  0536  2D1C               	goto	l134
   739                           
   740                           ;main.c: 189: SSP1IF = 0;
   741  0537  1191               	bcf	17,3	;volatile
   742                           
   743                           ;main.c: 190: address = SSP1BUF;
   744  0538  0024               	movlb	4	; select bank4
   745  0539  0811               	movf	17,w	;volatile
   746  053A  0020               	movlb	0	; select bank0
   747  053B  00D3               	movwf	??_main
   748  053C  0853               	movf	??_main,w
   749  053D  00D6               	movwf	main@address
   750                           
   751                           ;main.c: 191: if(SEN)
   752  053E  0024               	movlb	4	; select bank4
   753  053F  1816               	btfsc	22,0	;volatile
   754                           
   755                           ;main.c: 192: CKP = 1;
   756  0540  1615               	bsf	21,4	;volatile
   757                           
   758                           ;main.c: 194: if(address == 0xA0){
   759  0541  30A0               	movlw	160
   760  0542  0020               	movlb	0	; select bank0
   761  0543  0656               	xorwf	main@address,w
   762  0544  1D03               	btfss	3,2
   763  0545  2D1C               	goto	l134
   764  0546                     l138:	
   765                           ;main.c: 195: while(!SSP1IF);
   766                           
   767  0546  1D91               	btfss	17,3	;volatile
   768  0547  2D46               	goto	l138
   769                           
   770                           ;main.c: 196: SSP1IF = 0;
   771  0548  1191               	bcf	17,3	;volatile
   772                           
   773                           ;main.c: 197: command = SSP1BUF;
   774  0549  0024               	movlb	4	; select bank4
   775  054A  0811               	movf	17,w	;volatile
   776  054B  0020               	movlb	0	; select bank0
   777  054C  00D3               	movwf	??_main
   778  054D  0853               	movf	??_main,w
   779  054E  00D5               	movwf	main@command
   780  054F  2D1C               	goto	l134
   781  0550                     __end_of_main:	
   782                           
   783                           	psect	text1
   784  0154                     __ptext1:	
   785 ;; *************** function _read_ADC0 *****************
   786 ;; Defined at:
   787 ;;		line 227 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  high_count      4   43[BANK0 ] long 
   792 ;;  i               4   39[BANK0 ] long 
   793 ;;  duty_cycle      2   49[BANK0 ] unsigned int 
   794 ;;  DoubleWord      2   47[BANK0 ] struct .
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   804 ;;      Params:         0       0       0       0
   805 ;;      Locals:         0      12       0       0
   806 ;;      Temps:          0       1       0       0
   807 ;;      Totals:         0      13       0       0
   808 ;;Total ram usage:       13 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    3
   811 ;; This function calls:
   812 ;;		___altoft
   813 ;;		___ftmul
   814 ;;		___fttol
   815 ;;		_printf
   816 ;;		_update_duty_cycle
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _read_ADC0
   824  0154                     _read_ADC0:	
   825                           
   826                           ;main.c: 228: long i;
   827                           ;main.c: 230: long high_count;
   828                           ;main.c: 231: unsigned int duty_cycle;
   829                           ;main.c: 232: union {
   830                           ;main.c: 233: int Integer;
   831                           ;main.c: 234: char BitMap[2];
   832                           ;main.c: 235: }DoubleWord;
   833                           ;main.c: 236: printf("Reading ADC channel 0\n\r");
   834                           
   835                           ;incstack = 0
   836                           ; Regs used in _read_ADC0: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   837  0154  303C               	movlw	low (STR_3| (0+32768))
   838  0155  0020               	movlb	0	; select bank0
   839  0156  00AF               	movwf	printf@f
   840  0157  3083               	movlw	high (STR_3| (0+32768))
   841  0158  00B0               	movwf	printf@f+1
   842  0159  3180  2041  3181   	fcall	_printf
   843                           
   844                           ;main.c: 237: TRISA |= 0x01;
   845  015C  0021               	movlb	1	; select bank1
   846  015D  140C               	bsf	12,0	;volatile
   847                           
   848                           ;main.c: 238: ANSELA = 0x01;
   849  015E  3001               	movlw	1
   850  015F  0023               	movlb	3	; select bank3
   851  0160  008C               	movwf	12	;volatile
   852                           
   853                           ;main.c: 239: ADCON1 = 0xC0;
   854  0161  30C0               	movlw	192
   855  0162  0021               	movlb	1	; select bank1
   856  0163  009E               	movwf	30	;volatile
   857                           
   858                           ;main.c: 240: duty_cycle = 511;
   859  0164  30FF               	movlw	255
   860  0165  0020               	movlb	0	; select bank0
   861  0166  00D1               	movwf	read_ADC0@duty_cycle
   862  0167  3001               	movlw	1
   863  0168  00D2               	movwf	read_ADC0@duty_cycle+1
   864                           
   865                           ;main.c: 241: update_duty_cycle(duty_cycle);
   866  0169  0852               	movf	read_ADC0@duty_cycle+1,w
   867  016A  00F3               	movwf	update_duty_cycle@duty+1
   868  016B  0851               	movf	read_ADC0@duty_cycle,w
   869  016C  00F2               	movwf	update_duty_cycle@duty
   870  016D  3185  25D0  3181   	fcall	_update_duty_cycle
   871  0170                     l1549:	
   872                           ;main.c: 242: while(1){
   873                           
   874                           
   875                           ;main.c: 243: high_count = 0;
   876  0170  3000               	movlw	0
   877  0171  0020               	movlb	0	; select bank0
   878  0172  00CE               	movwf	read_ADC0@high_count+3
   879  0173  3000               	movlw	0
   880  0174  00CD               	movwf	read_ADC0@high_count+2
   881  0175  3000               	movlw	0
   882  0176  00CC               	movwf	read_ADC0@high_count+1
   883  0177  3000               	movlw	0
   884  0178  00CB               	movwf	read_ADC0@high_count
   885                           
   886                           ;main.c: 244: for(i=0;i<300000;i++){
   887  0179  3000               	movlw	0
   888  017A  00CA               	movwf	read_ADC0@i+3
   889  017B  3000               	movlw	0
   890  017C  00C9               	movwf	read_ADC0@i+2
   891  017D  3000               	movlw	0
   892  017E  00C8               	movwf	read_ADC0@i+1
   893  017F  3000               	movlw	0
   894  0180  00C7               	movwf	read_ADC0@i
   895  0181  1BCA               	btfsc	read_ADC0@i+3,7
   896  0182  298E               	goto	l147
   897  0183  084A               	movf	read_ADC0@i+3,w
   898  0184  1D03               	btfss	3,2
   899  0185  29CF               	goto	l1565
   900  0186  30E0               	movlw	224
   901  0187  0247               	subwf	read_ADC0@i,w
   902  0188  3093               	movlw	147
   903  0189  3B48               	subwfb	read_ADC0@i+1,w
   904  018A  3004               	movlw	4
   905  018B  3B49               	subwfb	read_ADC0@i+2,w
   906  018C  1803               	btfsc	3,0
   907  018D  29CF               	goto	l1565
   908  018E                     l147:	
   909                           
   910                           ;main.c: 245: ADCON0bits.GO = 1;
   911  018E  0021               	movlb	1	; select bank1
   912  018F  149D               	bsf	29,1	;volatile
   913  0190                     l149:	
   914                           ;main.c: 246: while(ADCON0bits.GO);
   915                           
   916  0190  189D               	btfsc	29,1	;volatile
   917  0191  2990               	goto	l149
   918                           
   919                           ;main.c: 248: DoubleWord.BitMap[1] = ADRESH;
   920  0192  081C               	movf	28,w	;volatile
   921  0193  0020               	movlb	0	; select bank0
   922  0194  00C6               	movwf	??_read_ADC0
   923  0195  0846               	movf	??_read_ADC0,w
   924  0196  00D0               	movwf	read_ADC0@DoubleWord+1
   925                           
   926                           ;main.c: 249: DoubleWord.BitMap[0] = ADRESL;
   927  0197  0021               	movlb	1	; select bank1
   928  0198  081B               	movf	27,w	;volatile
   929  0199  0020               	movlb	0	; select bank0
   930  019A  00C6               	movwf	??_read_ADC0
   931  019B  0846               	movf	??_read_ADC0,w
   932  019C  00CF               	movwf	read_ADC0@DoubleWord
   933                           
   934                           ;main.c: 251: if(DoubleWord.Integer > 400)
   935  019D  0850               	movf	read_ADC0@DoubleWord+1,w
   936  019E  3A80               	xorlw	128
   937  019F  00C6               	movwf	??_read_ADC0
   938  01A0  3081               	movlw	129
   939  01A1  0246               	subwf	??_read_ADC0,w
   940  01A2  1D03               	skipz
   941  01A3  29A6               	goto	u1735
   942  01A4  3091               	movlw	145
   943  01A5  024F               	subwf	read_ADC0@DoubleWord,w
   944  01A6                     u1735:	
   945  01A6  1C03               	skipc
   946  01A7  29B1               	goto	l1561
   947                           
   948                           ;main.c: 252: high_count++;
   949  01A8  3001               	movlw	1
   950  01A9  0020               	movlb	0	; select bank0
   951  01AA  07CB               	addwf	read_ADC0@high_count,f
   952  01AB  3000               	movlw	0
   953  01AC  3DCC               	addwfc	read_ADC0@high_count+1,f
   954  01AD  3000               	movlw	0
   955  01AE  3DCD               	addwfc	read_ADC0@high_count+2,f
   956  01AF  3000               	movlw	0
   957  01B0  29B9               	goto	L1
   958  01B1                     l1561:	
   959                           
   960                           ;main.c: 253: else
   961                           ;main.c: 254: high_count--;
   962  01B1  30FF               	movlw	255
   963  01B2  0020               	movlb	0	; select bank0
   964  01B3  07CB               	addwf	read_ADC0@high_count,f
   965  01B4  30FF               	movlw	255
   966  01B5  3DCC               	addwfc	read_ADC0@high_count+1,f
   967  01B6  30FF               	movlw	255
   968  01B7  3DCD               	addwfc	read_ADC0@high_count+2,f
   969  01B8  30FF               	movlw	255
   970  01B9                     L1:	
   971  01B9  3DCE               	addwfc	read_ADC0@high_count+3,f
   972  01BA  3001               	movlw	1
   973  01BB  07C7               	addwf	read_ADC0@i,f
   974  01BC  3000               	movlw	0
   975  01BD  3DC8               	addwfc	read_ADC0@i+1,f
   976  01BE  3000               	movlw	0
   977  01BF  3DC9               	addwfc	read_ADC0@i+2,f
   978  01C0  3000               	movlw	0
   979  01C1  3DCA               	addwfc	read_ADC0@i+3,f
   980  01C2  1BCA               	btfsc	read_ADC0@i+3,7
   981  01C3  298E               	goto	l147
   982  01C4  084A               	movf	read_ADC0@i+3,w
   983  01C5  1D03               	btfss	3,2
   984  01C6  29CF               	goto	l1565
   985  01C7  30E0               	movlw	224
   986  01C8  0247               	subwf	read_ADC0@i,w
   987  01C9  3093               	movlw	147
   988  01CA  3B48               	subwfb	read_ADC0@i+1,w
   989  01CB  3004               	movlw	4
   990  01CC  3B49               	subwfb	read_ADC0@i+2,w
   991  01CD  1C03               	btfss	3,0
   992  01CE  298E               	goto	l147
   993  01CF                     l1565:	
   994                           
   995                           ;main.c: 255: }
   996                           ;main.c: 256: duty_cycle -= high_count*0.001;
   997  01CF  084E               	movf	read_ADC0@high_count+3,w
   998  01D0  00A3               	movwf	___altoft@c+3
   999  01D1  084D               	movf	read_ADC0@high_count+2,w
  1000  01D2  00A2               	movwf	___altoft@c+2
  1001  01D3  084C               	movf	read_ADC0@high_count+1,w
  1002  01D4  00A1               	movwf	___altoft@c+1
  1003  01D5  084B               	movf	read_ADC0@high_count,w
  1004  01D6  00A0               	movwf	___altoft@c
  1005  01D7  3185  2593  3181   	fcall	___altoft
  1006  01DA  0020               	movlb	0	; select bank0
  1007  01DB  0820               	movf	?___altoft,w
  1008  01DC  00AB               	movwf	___ftmul@f2
  1009  01DD  0821               	movf	?___altoft+1,w
  1010  01DE  00AC               	movwf	___ftmul@f2+1
  1011  01DF  0822               	movf	?___altoft+2,w
  1012  01E0  00AD               	movwf	___ftmul@f2+2
  1013  01E1  3012               	movlw	18
  1014  01E2  00A8               	movwf	___ftmul@f1
  1015  01E3  3083               	movlw	131
  1016  01E4  00A9               	movwf	___ftmul@f1+1
  1017  01E5  303A               	movlw	58
  1018  01E6  00AA               	movwf	___ftmul@f1+2
  1019  01E7  3182  2227  3181   	fcall	___ftmul
  1020  01EA  0020               	movlb	0	; select bank0
  1021  01EB  0828               	movf	?___ftmul,w
  1022  01EC  00B8               	movwf	___fttol@f1
  1023  01ED  0829               	movf	?___ftmul+1,w
  1024  01EE  00B9               	movwf	___fttol@f1+1
  1025  01EF  082A               	movf	?___ftmul+2,w
  1026  01F0  00BA               	movwf	___fttol@f1+2
  1027  01F1  3183  2362  3181   	fcall	___fttol
  1028  01F4  0020               	movlb	0	; select bank0
  1029  01F5  0838               	movf	?___fttol,w
  1030  01F6  02D1               	subwf	read_ADC0@duty_cycle,f
  1031  01F7  0839               	movf	?___fttol+1,w
  1032  01F8  3BD2               	subwfb	read_ADC0@duty_cycle+1,f
  1033                           
  1034                           ;main.c: 258: if(duty_cycle > 1023)
  1035  01F9  3004               	movlw	4
  1036  01FA  0252               	subwf	read_ADC0@duty_cycle+1,w
  1037  01FB  3000               	movlw	0
  1038  01FC  1903               	skipnz
  1039  01FD  0251               	subwf	read_ADC0@duty_cycle,w
  1040  01FE  1C03               	skipc
  1041  01FF  2A05               	goto	l1571
  1042                           
  1043                           ;main.c: 259: duty_cycle = 1023;
  1044  0200  30FF               	movlw	255
  1045  0201  00D1               	movwf	read_ADC0@duty_cycle
  1046  0202  3003               	movlw	3
  1047  0203  00D2               	movwf	read_ADC0@duty_cycle+1
  1048  0204  2A0B               	goto	l1575
  1049  0205                     l1571:	
  1050                           
  1051                           ;main.c: 260: else if(duty_cycle > 0)
  1052  0205  0851               	movf	read_ADC0@duty_cycle,w
  1053  0206  0452               	iorwf	read_ADC0@duty_cycle+1,w
  1054  0207  1903               	btfsc	3,2
  1055  0208  2A0B               	goto	l1575
  1056                           
  1057                           ;main.c: 261: duty_cycle = 0;
  1058  0209  01D1               	clrf	read_ADC0@duty_cycle
  1059  020A  01D2               	clrf	read_ADC0@duty_cycle+1
  1060  020B                     l1575:	
  1061                           
  1062                           ;main.c: 262: update_duty_cycle(duty_cycle);
  1063  020B  0852               	movf	read_ADC0@duty_cycle+1,w
  1064  020C  00F3               	movwf	update_duty_cycle@duty+1
  1065  020D  0851               	movf	read_ADC0@duty_cycle,w
  1066  020E  00F2               	movwf	update_duty_cycle@duty
  1067  020F  3185  25D0  3181   	fcall	_update_duty_cycle
  1068                           
  1069                           ;main.c: 263: printf("High count:%ld, duty cycle:%d\n\r", high_count, duty_cycle);
  1070  0212  3003               	movlw	low (STR_4| (0+32768))
  1071  0213  0020               	movlb	0	; select bank0
  1072  0214  00AF               	movwf	printf@f
  1073  0215  3083               	movlw	high (STR_4| (0+32768))
  1074  0216  00B0               	movwf	printf@f+1
  1075  0217  084E               	movf	read_ADC0@high_count+3,w
  1076  0218  00B4               	movwf	?_printf+5
  1077  0219  084D               	movf	read_ADC0@high_count+2,w
  1078  021A  00B3               	movwf	?_printf+4
  1079  021B  084C               	movf	read_ADC0@high_count+1,w
  1080  021C  00B2               	movwf	?_printf+3
  1081  021D  084B               	movf	read_ADC0@high_count,w
  1082  021E  00B1               	movwf	?_printf+2
  1083  021F  0852               	movf	read_ADC0@duty_cycle+1,w
  1084  0220  00B6               	movwf	?_printf+7
  1085  0221  0851               	movf	read_ADC0@duty_cycle,w
  1086  0222  00B5               	movwf	?_printf+6
  1087  0223  3180  2041  3181   	fcall	_printf
  1088  0226  2970               	goto	l1549
  1089  0227                     __end_of_read_ADC0:	
  1090                           
  1091                           	psect	text2
  1092  05D0                     __ptext2:	
  1093 ;; *************** function _update_duty_cycle *****************
  1094 ;; Defined at:
  1095 ;;		line 151 in file "main.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  duty            2    2[COMMON] unsigned int 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  temp            2    6[COMMON] unsigned int 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      void 
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1109 ;;      Params:         2       0       0       0
  1110 ;;      Locals:         2       0       0       0
  1111 ;;      Temps:          2       0       0       0
  1112 ;;      Totals:         6       0       0       0
  1113 ;;Total ram usage:        6 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    1
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_main
  1120 ;;		_read_ADC0
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           
  1125                           ;psect for function _update_duty_cycle
  1126  05D0                     _update_duty_cycle:	
  1127                           
  1128                           ;main.c: 152: unsigned int temp;
  1129                           ;main.c: 154: if(duty > 1023)
  1130                           
  1131                           ;incstack = 0
  1132                           ; Regs used in _update_duty_cycle: [wreg+status,2+status,0]
  1133  05D0  3004               	movlw	4
  1134  05D1  0273               	subwf	update_duty_cycle@duty+1,w
  1135  05D2  3000               	movlw	0
  1136  05D3  1903               	skipnz
  1137  05D4  0272               	subwf	update_duty_cycle@duty,w
  1138  05D5  1C03               	skipc
  1139  05D6  2DDB               	goto	l1137
  1140                           
  1141                           ;main.c: 155: duty = 1023;
  1142  05D7  30FF               	movlw	255
  1143  05D8  00F2               	movwf	update_duty_cycle@duty
  1144  05D9  3003               	movlw	3
  1145  05DA  00F3               	movwf	update_duty_cycle@duty+1
  1146  05DB                     l1137:	
  1147                           
  1148                           ;main.c: 157: temp = duty >> 2;
  1149  05DB  0873               	movf	update_duty_cycle@duty+1,w
  1150  05DC  00F5               	movwf	??_update_duty_cycle+1
  1151  05DD  0872               	movf	update_duty_cycle@duty,w
  1152  05DE  00F4               	movwf	??_update_duty_cycle
  1153  05DF  36F5               	lsrf	??_update_duty_cycle+1,f
  1154  05E0  0CF4               	rrf	??_update_duty_cycle,f
  1155  05E1  36F5               	lsrf	??_update_duty_cycle+1,f
  1156  05E2  0CF4               	rrf	??_update_duty_cycle,f
  1157  05E3  0874               	movf	??_update_duty_cycle,w
  1158  05E4  00F6               	movwf	update_duty_cycle@temp
  1159  05E5  0875               	movf	??_update_duty_cycle+1,w
  1160  05E6  00F7               	movwf	update_duty_cycle@temp+1
  1161                           
  1162                           ;main.c: 158: CCPR1L = temp;
  1163  05E7  0876               	movf	update_duty_cycle@temp,w
  1164  05E8  0025               	movlb	5	; select bank5
  1165  05E9  0091               	movwf	17	;volatile
  1166                           
  1167                           ;main.c: 161: temp = duty & 0x03;
  1168  05EA  3003               	movlw	3
  1169  05EB  0572               	andwf	update_duty_cycle@duty,w
  1170  05EC  00F6               	movwf	update_duty_cycle@temp
  1171  05ED  3000               	movlw	0
  1172  05EE  0573               	andwf	update_duty_cycle@duty+1,w
  1173  05EF  00F7               	movwf	update_duty_cycle@temp+1
  1174                           
  1175                           ;main.c: 162: temp = temp << 4;
  1176  05F0  0877               	movf	update_duty_cycle@temp+1,w
  1177  05F1  00F5               	movwf	??_update_duty_cycle+1
  1178  05F2  0876               	movf	update_duty_cycle@temp,w
  1179  05F3  00F4               	movwf	??_update_duty_cycle
  1180  05F4  0EF4               	swapf	??_update_duty_cycle,f
  1181  05F5  0EF5               	swapf	??_update_duty_cycle+1,f
  1182  05F6  30F0               	movlw	240
  1183  05F7  05F5               	andwf	??_update_duty_cycle+1,f
  1184  05F8  0874               	movf	??_update_duty_cycle,w
  1185  05F9  390F               	andlw	15
  1186  05FA  04F5               	iorwf	??_update_duty_cycle+1,f
  1187  05FB  30F0               	movlw	240
  1188  05FC  05F4               	andwf	??_update_duty_cycle,f
  1189  05FD  0874               	movf	??_update_duty_cycle,w
  1190  05FE  00F6               	movwf	update_duty_cycle@temp
  1191  05FF  0875               	movf	??_update_duty_cycle+1,w
  1192  0600  00F7               	movwf	update_duty_cycle@temp+1
  1193                           
  1194                           ;main.c: 163: CCP1CON |= temp;
  1195  0601  0876               	movf	update_duty_cycle@temp,w
  1196  0602  00F4               	movwf	??_update_duty_cycle
  1197  0603  0874               	movf	??_update_duty_cycle,w
  1198  0604  0493               	iorwf	19,f	;volatile
  1199  0605  0008               	return
  1200  0606                     __end_of_update_duty_cycle:	
  1201                           
  1202                           	psect	text3
  1203  0041                     __ptext3:	
  1204 ;; *************** function _printf *****************
  1205 ;; Defined at:
  1206 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  1209 ;;		 -> STR_4(32), STR_3(24), STR_2(14), STR_1(25), 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  val             4   33[BANK0 ] unsigned long 
  1212 ;;  tmpval          4    0        struct .
  1213 ;;  prec            2   29[BANK0 ] int 
  1214 ;;  cp              2    0        PTR const unsigned char 
  1215 ;;  len             2    0        unsigned int 
  1216 ;;  c               1   37[BANK0 ] char 
  1217 ;;  ap              1   32[BANK0 ] PTR void [1]
  1218 ;;		 -> ?_printf(2), 
  1219 ;;  flag            1   31[BANK0 ] unsigned char 
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  2   15[BANK0 ] int 
  1222 ;; Registers used:
  1223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1229 ;;      Params:         0       8       0       0
  1230 ;;      Locals:         0       9       0       0
  1231 ;;      Temps:          0       6       0       0
  1232 ;;      Totals:         0      23       0       0
  1233 ;;Total ram usage:       23 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    2
  1236 ;; This function calls:
  1237 ;;		___lldiv
  1238 ;;		___llmod
  1239 ;;		_putch
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;;		_read_ADC0
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _printf
  1248  0041                     _printf:	
  1249                           
  1250                           ;doprnt.c: 466: va_list ap;
  1251                           ;doprnt.c: 499: signed char c;
  1252                           ;doprnt.c: 504: int prec;
  1253                           ;doprnt.c: 508: unsigned char flag;
  1254                           ;doprnt.c: 523: union {
  1255                           ;doprnt.c: 524: unsigned long vd;
  1256                           ;doprnt.c: 525: double integ;
  1257                           ;doprnt.c: 526: } tmpval;
  1258                           ;doprnt.c: 528: unsigned long val;
  1259                           ;doprnt.c: 529: unsigned len;
  1260                           ;doprnt.c: 530: const char * cp;
  1261                           ;doprnt.c: 533: *ap = __va_start();
  1262                           
  1263                           ;incstack = 0
  1264                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1265  0041  3031               	movlw	(low ((?_printf| 0+2)))& (0+255)
  1266  0042  0020               	movlb	0	; select bank0
  1267  0043  00B7               	movwf	??_printf
  1268  0044  0837               	movf	??_printf,w
  1269  0045  00C0               	movwf	printf@ap
  1270  0046                     l1519:	
  1271                           ;doprnt.c: 536: while(c = *f++) {
  1272                           
  1273  0046  0020               	movlb	0	; select bank0
  1274  0047  0830               	movf	printf@f+1,w
  1275  0048  00B8               	movwf	??_printf+1
  1276  0049  082F               	movf	printf@f,w
  1277  004A  00B7               	movwf	??_printf
  1278  004B  0AAF               	incf	printf@f,f
  1279  004C  1903               	skipnz
  1280  004D  0AB0               	incf	printf@f+1,f
  1281  004E  0837               	movf	??_printf,w
  1282  004F  0084               	movwf	4
  1283  0050  0838               	movf	??_printf+1,w
  1284  0051  0085               	movwf	5
  1285  0052  0800               	movf	0,w	;code access
  1286  0053  00B9               	movwf	??_printf+2
  1287  0054  0839               	movf	??_printf+2,w
  1288  0055  00C5               	movwf	printf@c
  1289  0056  0845               	movf	printf@c,w
  1290  0057  1903               	btfsc	3,2
  1291  0058  0008               	return
  1292                           
  1293                           ;doprnt.c: 538: if(c != '%')
  1294  0059  3025               	movlw	37
  1295  005A  0645               	xorwf	printf@c,w
  1296  005B  1903               	btfsc	3,2
  1297  005C  2862               	goto	l1471
  1298                           
  1299                           ;doprnt.c: 540: {
  1300                           ;doprnt.c: 541: (putch(c) );
  1301  005D  0845               	movf	printf@c,w
  1302  005E  3186  2606  3180   	fcall	_putch
  1303                           
  1304                           ;doprnt.c: 542: continue;
  1305  0061  2846               	goto	l1519
  1306  0062                     l1471:	
  1307                           
  1308                           ;doprnt.c: 543: }
  1309                           ;doprnt.c: 548: flag = 0;
  1310  0062  0020               	movlb	0	; select bank0
  1311  0063  01BF               	clrf	printf@flag
  1312                           
  1313                           ;doprnt.c: 635: switch(c = *f++) {
  1314                           
  1315                           ;doprnt.c: 633: loop:
  1316  0064  2877               	goto	l1481
  1317  0065                     l177:	
  1318                           ;doprnt.c: 641: case 'l':
  1319                           
  1320                           ;doprnt.c: 638: goto alldone;
  1321                           
  1322                           ;doprnt.c: 637: case 0:
  1323                           
  1324                           
  1325                           ;doprnt.c: 643: flag |= 0x10;
  1326  0065  163F               	bsf	printf@flag,4
  1327                           
  1328                           ;doprnt.c: 644: goto loop;
  1329  0066  2877               	goto	l1481
  1330  0067                     l1473:	
  1331                           ;doprnt.c: 784: case 'c':
  1332                           
  1333                           ;doprnt.c: 698: case 'i':
  1334                           ;doprnt.c: 699: break;
  1335                           
  1336                           ;doprnt.c: 697: case 'd':
  1337                           
  1338                           
  1339                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1340  0067  0840               	movf	printf@ap,w
  1341  0068  0086               	movwf	6
  1342  0069  0187               	clrf	7
  1343  006A  0801               	movf	1,w
  1344  006B  00B7               	movwf	??_printf
  1345  006C  0837               	movf	??_printf,w
  1346  006D  00C5               	movwf	printf@c
  1347  006E  3002               	movlw	2
  1348  006F  00B7               	movwf	??_printf
  1349  0070  0837               	movf	??_printf,w
  1350  0071  07C0               	addwf	printf@ap,f
  1351  0072                     l1477:	
  1352                           ;doprnt.c: 802: default:
  1353                           
  1354                           
  1355                           ;doprnt.c: 809: (putch(c) );
  1356  0072  0845               	movf	printf@c,w
  1357  0073  3186  2606  3180   	fcall	_putch
  1358                           
  1359                           ;doprnt.c: 810: continue;
  1360  0076  2846               	goto	l1519
  1361  0077                     l1481:	
  1362                           ;doprnt.c: 822: }
  1363                           
  1364  0077  0020               	movlb	0	; select bank0
  1365  0078  0830               	movf	printf@f+1,w
  1366  0079  00B8               	movwf	??_printf+1
  1367  007A  082F               	movf	printf@f,w
  1368  007B  00B7               	movwf	??_printf
  1369  007C  0AAF               	incf	printf@f,f
  1370  007D  1903               	skipnz
  1371  007E  0AB0               	incf	printf@f+1,f
  1372  007F  0837               	movf	??_printf,w
  1373  0080  0084               	movwf	4
  1374  0081  0838               	movf	??_printf+1,w
  1375  0082  0085               	movwf	5
  1376  0083  0800               	movf	0,w	;code access
  1377  0084  00C5               	movwf	printf@c
  1378                           
  1379                           ; Switch size 1, requested type "space"
  1380                           ; Number of cases is 5, Range of values is 0 to 108
  1381                           ; switch strategies available:
  1382                           ; Name         Instructions Cycles
  1383                           ; simple_byte           16     9 (average)
  1384                           ; direct_byte          224     6 (fixed)
  1385                           ; jumptable            260     6 (fixed)
  1386                           ;	Chosen strategy is simple_byte
  1387  0085  3A00               	xorlw	0	; case 0
  1388  0086  1903               	skipnz
  1389  0087  2953               	goto	l194
  1390  0088  3A63               	xorlw	99	; case 99
  1391  0089  1903               	skipnz
  1392  008A  2867               	goto	l1473
  1393  008B  3A07               	xorlw	7	; case 100
  1394  008C  1903               	skipnz
  1395  008D  2895               	goto	l180
  1396  008E  3A0D               	xorlw	13	; case 105
  1397  008F  1903               	skipnz
  1398  0090  2895               	goto	l180
  1399  0091  3A05               	xorlw	5	; case 108
  1400  0092  1903               	skipnz
  1401  0093  2865               	goto	l177
  1402  0094  2872               	goto	l1477
  1403  0095                     l180:	
  1404                           
  1405                           ;doprnt.c: 1253: {
  1406                           ;doprnt.c: 1255: if(flag & 0x10)
  1407  0095  0020               	movlb	0	; select bank0
  1408  0096  1E3F               	btfss	printf@flag,4
  1409  0097  28A5               	goto	l1487
  1410                           
  1411                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1412  0098  0840               	movf	printf@ap,w
  1413  0099  0086               	movwf	6
  1414  009A  0187               	clrf	7
  1415  009B  3F40               	moviw [0]fsr1
  1416  009C  00C1               	movwf	printf@val
  1417  009D  3F41               	moviw [1]fsr1
  1418  009E  00C2               	movwf	printf@val+1
  1419  009F  3F42               	moviw [2]fsr1
  1420  00A0  00C3               	movwf	printf@val+2
  1421  00A1  3F43               	moviw [3]fsr1
  1422  00A2  00C4               	movwf	printf@val+3
  1423  00A3  3004               	movlw	4
  1424  00A4  28B6               	goto	L2
  1425  00A5                     l1487:	
  1426                           
  1427                           ;doprnt.c: 1257: else
  1428                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1429  00A5  0840               	movf	printf@ap,w
  1430  00A6  0086               	movwf	6
  1431  00A7  0187               	clrf	7
  1432  00A8  3F40               	moviw [0]fsr1
  1433  00A9  00B7               	movwf	??_printf
  1434  00AA  3F41               	moviw [1]fsr1
  1435  00AB  00B8               	movwf	??_printf+1
  1436  00AC  0837               	movf	??_printf,w
  1437  00AD  00C1               	movwf	printf@val
  1438  00AE  0838               	movf	??_printf+1,w
  1439  00AF  00C2               	movwf	printf@val+1
  1440  00B0  0D89               	rlf	9,f
  1441  00B1  3B89               	subwfb	9,f
  1442  00B2  0989               	comf	9,f
  1443  00B3  00C3               	movwf	printf@val+2
  1444  00B4  00C4               	movwf	printf@val+3
  1445  00B5  3002               	movlw	2
  1446  00B6                     L2:	
  1447  00B6  00B7               	movwf	??_printf
  1448  00B7  0837               	movf	??_printf,w
  1449  00B8  07C0               	addwf	printf@ap,f
  1450                           
  1451                           ;doprnt.c: 1261: if((long)val < 0) {
  1452  00B9  1FC4               	btfss	printf@val+3,7
  1453  00BA  28CA               	goto	l1497
  1454                           
  1455                           ;doprnt.c: 1262: flag |= 0x03;
  1456  00BB  3003               	movlw	3
  1457  00BC  00B7               	movwf	??_printf
  1458  00BD  0837               	movf	??_printf,w
  1459  00BE  04BF               	iorwf	printf@flag,f
  1460                           
  1461                           ;doprnt.c: 1263: val = -val;
  1462  00BF  09C1               	comf	printf@val,f
  1463  00C0  09C2               	comf	printf@val+1,f
  1464  00C1  09C3               	comf	printf@val+2,f
  1465  00C2  09C4               	comf	printf@val+3,f
  1466  00C3  0AC1               	incf	printf@val,f
  1467  00C4  1903               	skipnz
  1468  00C5  0AC2               	incf	printf@val+1,f
  1469  00C6  1903               	skipnz
  1470  00C7  0AC3               	incf	printf@val+2,f
  1471  00C8  1903               	skipnz
  1472  00C9  0AC4               	incf	printf@val+3,f
  1473  00CA                     l1497:	
  1474                           
  1475                           ;doprnt.c: 1264: }
  1476                           ;doprnt.c: 1266: }
  1477                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1478  00CA  01C5               	clrf	printf@c
  1479  00CB  0AC5               	incf	printf@c,f
  1480  00CC  300A               	movlw	10
  1481  00CD  0645               	xorwf	printf@c,w
  1482  00CE  1903               	btfsc	3,2
  1483  00CF  28FD               	goto	l1507
  1484  00D0                     l1501:	
  1485                           
  1486                           ;doprnt.c: 1306: if(val < dpowers[c])
  1487  00D0  0845               	movf	printf@c,w
  1488  00D1  00B7               	movwf	??_printf
  1489  00D2  01B8               	clrf	??_printf+1
  1490  00D3  35B7               	lslf	??_printf,f
  1491  00D4  0DB8               	rlf	??_printf+1,f
  1492  00D5  35B7               	lslf	??_printf,f
  1493  00D6  0DB8               	rlf	??_printf+1,f
  1494  00D7  30DB               	movlw	low (_dpowers| (0+32768))
  1495  00D8  0737               	addwf	??_printf,w
  1496  00D9  0084               	movwf	4
  1497  00DA  3082               	movlw	high (_dpowers| (0+32768))
  1498  00DB  3D38               	addwfc	??_printf+1,w
  1499  00DC  0085               	movwf	5
  1500  00DD  3F00               	moviw [0]fsr0
  1501  00DE  00B9               	movwf	??_printf+2
  1502  00DF  3F01               	moviw [1]fsr0
  1503  00E0  00BA               	movwf	??_printf+3
  1504  00E1  3F02               	moviw [2]fsr0
  1505  00E2  00BB               	movwf	??_printf+4
  1506  00E3  3F03               	moviw [3]fsr0
  1507  00E4  00BC               	movwf	??_printf+5
  1508  00E5  083C               	movf	??_printf+5,w
  1509  00E6  0244               	subwf	printf@val+3,w
  1510  00E7  1D03               	skipz
  1511  00E8  28F3               	goto	u1635
  1512  00E9  083B               	movf	??_printf+4,w
  1513  00EA  0243               	subwf	printf@val+2,w
  1514  00EB  1D03               	skipz
  1515  00EC  28F3               	goto	u1635
  1516  00ED  083A               	movf	??_printf+3,w
  1517  00EE  0242               	subwf	printf@val+1,w
  1518  00EF  1D03               	skipz
  1519  00F0  28F3               	goto	u1635
  1520  00F1  0839               	movf	??_printf+2,w
  1521  00F2  0241               	subwf	printf@val,w
  1522  00F3                     u1635:	
  1523  00F3  1C03               	btfss	3,0
  1524  00F4  28FD               	goto	l1507
  1525                           
  1526                           ;doprnt.c: 1307: break;
  1527  00F5  3001               	movlw	1
  1528  00F6  00B7               	movwf	??_printf
  1529  00F7  0837               	movf	??_printf,w
  1530  00F8  07C5               	addwf	printf@c,f
  1531  00F9  300A               	movlw	10
  1532  00FA  0645               	xorwf	printf@c,w
  1533  00FB  1D03               	btfss	3,2
  1534  00FC  28D0               	goto	l1501
  1535  00FD                     l1507:	
  1536                           
  1537                           ;doprnt.c: 1422: {
  1538                           ;doprnt.c: 1438: if(flag & 0x03)
  1539  00FD  083F               	movf	printf@flag,w
  1540  00FE  3903               	andlw	3
  1541  00FF  1903               	btfsc	3,2
  1542  0100  2905               	goto	l1511
  1543                           
  1544                           ;doprnt.c: 1439: (putch('-') );
  1545  0101  302D               	movlw	45
  1546  0102  3186  2606  3180   	fcall	_putch
  1547  0105                     l1511:	
  1548                           
  1549                           ;doprnt.c: 1469: }
  1550                           ;doprnt.c: 1472: prec = c;
  1551  0105  0020               	movlb	0	; select bank0
  1552  0106  0845               	movf	printf@c,w
  1553  0107  00BD               	movwf	printf@prec
  1554  0108  01BE               	clrf	printf@prec+1
  1555  0109  1BBD               	btfsc	printf@prec,7
  1556  010A  03BE               	decf	printf@prec+1,f
  1557  010B                     l1517:	
  1558                           ;doprnt.c: 1474: while(prec--) {
  1559                           
  1560  010B  30FF               	movlw	255
  1561  010C  0020               	movlb	0	; select bank0
  1562  010D  07BD               	addwf	printf@prec,f
  1563  010E  30FF               	movlw	255
  1564  010F  3DBE               	addwfc	printf@prec+1,f
  1565  0110  0A3D               	incf	printf@prec,w
  1566  0111  1903               	btfsc	3,2
  1567  0112  0A3E               	incf	printf@prec+1,w
  1568  0113  1903               	btfsc	3,2
  1569  0114  2846               	goto	l1519
  1570                           
  1571                           ;doprnt.c: 1478: {
  1572                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1573  0115  3000               	movlw	0
  1574  0116  00A8               	movwf	___llmod@divisor+3
  1575  0117  3000               	movlw	0
  1576  0118  00A7               	movwf	___llmod@divisor+2
  1577  0119  3000               	movlw	0
  1578  011A  00A6               	movwf	___llmod@divisor+1
  1579  011B  300A               	movlw	10
  1580  011C  00A5               	movwf	___llmod@divisor
  1581  011D  083E               	movf	printf@prec+1,w
  1582  011E  0085               	movwf	5
  1583  011F  083D               	movf	printf@prec,w
  1584  0120  0084               	movwf	4
  1585  0121  3584               	lslf	4,f
  1586  0122  0D85               	rlf	5,f
  1587  0123  3584               	lslf	4,f
  1588  0124  0D85               	rlf	5,f
  1589  0125  30DB               	movlw	low (_dpowers| (0+32768))
  1590  0126  0784               	addwf	4,f
  1591  0127  3082               	movlw	high (_dpowers| (0+32768))
  1592  0128  3D85               	addwfc	5,f
  1593  0129  3F00               	moviw [0]fsr0
  1594  012A  00F2               	movwf	___lldiv@divisor
  1595  012B  3F01               	moviw [1]fsr0
  1596  012C  00F3               	movwf	___lldiv@divisor+1
  1597  012D  3F02               	moviw [2]fsr0
  1598  012E  00F4               	movwf	___lldiv@divisor+2
  1599  012F  3F03               	moviw [3]fsr0
  1600  0130  00F5               	movwf	___lldiv@divisor+3
  1601  0131  0844               	movf	printf@val+3,w
  1602  0132  00F9               	movwf	___lldiv@dividend+3
  1603  0133  0843               	movf	printf@val+2,w
  1604  0134  00F8               	movwf	___lldiv@dividend+2
  1605  0135  0842               	movf	printf@val+1,w
  1606  0136  00F7               	movwf	___lldiv@dividend+1
  1607  0137  0841               	movf	printf@val,w
  1608  0138  00F6               	movwf	___lldiv@dividend
  1609  0139  3184  24B4  3180   	fcall	___lldiv
  1610  013C  0875               	movf	?___lldiv+3,w
  1611  013D  0020               	movlb	0	; select bank0
  1612  013E  00AC               	movwf	___llmod@dividend+3
  1613  013F  0874               	movf	?___lldiv+2,w
  1614  0140  00AB               	movwf	___llmod@dividend+2
  1615  0141  0873               	movf	?___lldiv+1,w
  1616  0142  00AA               	movwf	___llmod@dividend+1
  1617  0143  0872               	movf	?___lldiv,w
  1618  0144  00A9               	movwf	___llmod@dividend
  1619  0145  3185  2550  3180   	fcall	___llmod
  1620  0148  0020               	movlb	0	; select bank0
  1621  0149  0825               	movf	?___llmod,w
  1622  014A  3E30               	addlw	48
  1623  014B  00B7               	movwf	??_printf
  1624  014C  0837               	movf	??_printf,w
  1625  014D  00C5               	movwf	printf@c
  1626                           
  1627                           ;doprnt.c: 1523: }
  1628                           ;doprnt.c: 1524: (putch(c) );
  1629  014E  0845               	movf	printf@c,w
  1630  014F  3186  2606  3180   	fcall	_putch
  1631  0152  290B               	goto	l1517
  1632  0153                     l194:	
  1633                           ;doprnt.c: 1540: return 0;
  1634                           ;	Return value of _printf is never used
  1635                           
  1636                           ;doprnt.c: 1525: }
  1637                           ;doprnt.c: 1533: }
  1638                           ;doprnt.c: 1535: alldone:
  1639                           
  1640  0153  0008               	return
  1641  0154                     __end_of_printf:	
  1642                           
  1643                           	psect	text4
  1644  0606                     __ptext4:	
  1645 ;; *************** function _putch *****************
  1646 ;; Defined at:
  1647 ;;		line 3 in file "putc.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  data            1    wreg     unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  data            1    2[COMMON] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1661 ;;      Params:         0       0       0       0
  1662 ;;      Locals:         1       0       0       0
  1663 ;;      Temps:          0       0       0       0
  1664 ;;      Totals:         1       0       0       0
  1665 ;;Total ram usage:        1 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_printf
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           
  1676                           ;psect for function _putch
  1677  0606                     _putch:	
  1678                           
  1679                           ;incstack = 0
  1680                           ; Regs used in _putch: [wreg]
  1681                           ;putch@data stored from wreg
  1682  0606  00F2               	movwf	putch@data
  1683  0607                     l99:	
  1684                           ;putc.c: 5: continue;
  1685                           
  1686                           ;putc.c: 4: while(!TXIF)
  1687                           
  1688  0607  0020               	movlb	0	; select bank0
  1689  0608  1E11               	btfss	17,4	;volatile
  1690  0609  2E07               	goto	l99
  1691                           
  1692                           ;putc.c: 7: TXREG = data;
  1693  060A  0872               	movf	putch@data,w
  1694  060B  0023               	movlb	3	; select bank3
  1695  060C  009A               	movwf	26	;volatile
  1696  060D  0008               	return
  1697  060E                     __end_of_putch:	
  1698                           
  1699                           	psect	text5
  1700  0550                     __ptext5:	
  1701 ;; *************** function ___llmod *****************
  1702 ;; Defined at:
  1703 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  divisor         4    5[BANK0 ] unsigned long 
  1706 ;;  dividend        4    9[BANK0 ] unsigned long 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  counter         1   14[BANK0 ] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  4    5[BANK0 ] unsigned long 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1718 ;;      Params:         0       8       0       0
  1719 ;;      Locals:         0       1       0       0
  1720 ;;      Temps:          0       1       0       0
  1721 ;;      Totals:         0      10       0       0
  1722 ;;Total ram usage:       10 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    1
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_printf
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           
  1733                           ;psect for function ___llmod
  1734  0550                     ___llmod:	
  1735                           
  1736                           ;incstack = 0
  1737                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  1738  0550  0020               	movlb	0	; select bank0
  1739  0551  0828               	movf	___llmod@divisor+3,w
  1740  0552  0427               	iorwf	___llmod@divisor+2,w
  1741  0553  0426               	iorwf	___llmod@divisor+1,w
  1742  0554  0425               	iorwf	___llmod@divisor,w
  1743  0555  1903               	skipnz
  1744  0556  2D8A               	goto	l1461
  1745  0557  01AE               	clrf	___llmod@counter
  1746  0558  0AAE               	incf	___llmod@counter,f
  1747  0559                     l1451:	
  1748  0559  1BA8               	btfsc	___llmod@divisor+3,7
  1749  055A  2D67               	goto	l1453
  1750  055B  3001               	movlw	1
  1751  055C                     u1545:	
  1752  055C  35A5               	lslf	___llmod@divisor,f
  1753  055D  0DA6               	rlf	___llmod@divisor+1,f
  1754  055E  0DA7               	rlf	___llmod@divisor+2,f
  1755  055F  0DA8               	rlf	___llmod@divisor+3,f
  1756  0560  0B89               	decfsz	9,f
  1757  0561  2D5C               	goto	u1545
  1758  0562  3001               	movlw	1
  1759  0563  00AD               	movwf	??___llmod
  1760  0564  082D               	movf	??___llmod,w
  1761  0565  07AE               	addwf	___llmod@counter,f
  1762  0566  2D59               	goto	l1451
  1763  0567                     l1453:	
  1764  0567  0828               	movf	___llmod@divisor+3,w
  1765  0568  022C               	subwf	___llmod@dividend+3,w
  1766  0569  1D03               	skipz
  1767  056A  2D75               	goto	u1565
  1768  056B  0827               	movf	___llmod@divisor+2,w
  1769  056C  022B               	subwf	___llmod@dividend+2,w
  1770  056D  1D03               	skipz
  1771  056E  2D75               	goto	u1565
  1772  056F  0826               	movf	___llmod@divisor+1,w
  1773  0570  022A               	subwf	___llmod@dividend+1,w
  1774  0571  1D03               	skipz
  1775  0572  2D75               	goto	u1565
  1776  0573  0825               	movf	___llmod@divisor,w
  1777  0574  0229               	subwf	___llmod@dividend,w
  1778  0575                     u1565:	
  1779  0575  1C03               	skipc
  1780  0576  2D7F               	goto	l1457
  1781  0577  0825               	movf	___llmod@divisor,w
  1782  0578  02A9               	subwf	___llmod@dividend,f
  1783  0579  0826               	movf	___llmod@divisor+1,w
  1784  057A  3BAA               	subwfb	___llmod@dividend+1,f
  1785  057B  0827               	movf	___llmod@divisor+2,w
  1786  057C  3BAB               	subwfb	___llmod@dividend+2,f
  1787  057D  0828               	movf	___llmod@divisor+3,w
  1788  057E  3BAC               	subwfb	___llmod@dividend+3,f
  1789  057F                     l1457:	
  1790  057F  3001               	movlw	1
  1791  0580                     u1575:	
  1792  0580  36A8               	lsrf	___llmod@divisor+3,f
  1793  0581  0CA7               	rrf	___llmod@divisor+2,f
  1794  0582  0CA6               	rrf	___llmod@divisor+1,f
  1795  0583  0CA5               	rrf	___llmod@divisor,f
  1796  0584  0B89               	decfsz	9,f
  1797  0585  2D80               	goto	u1575
  1798  0586  3001               	movlw	1
  1799  0587  02AE               	subwf	___llmod@counter,f
  1800  0588  1D03               	btfss	3,2
  1801  0589  2D67               	goto	l1453
  1802  058A                     l1461:	
  1803  058A  082C               	movf	___llmod@dividend+3,w
  1804  058B  00A8               	movwf	?___llmod+3
  1805  058C  082B               	movf	___llmod@dividend+2,w
  1806  058D  00A7               	movwf	?___llmod+2
  1807  058E  082A               	movf	___llmod@dividend+1,w
  1808  058F  00A6               	movwf	?___llmod+1
  1809  0590  0829               	movf	___llmod@dividend,w
  1810  0591  00A5               	movwf	?___llmod
  1811  0592  0008               	return
  1812  0593                     __end_of___llmod:	
  1813                           
  1814                           	psect	text6
  1815  04B4                     __ptext6:	
  1816 ;; *************** function ___lldiv *****************
  1817 ;; Defined at:
  1818 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  divisor         4    2[COMMON] unsigned long 
  1821 ;;  dividend        4    6[COMMON] unsigned long 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  quotient        4    0[BANK0 ] unsigned long 
  1824 ;;  counter         1    4[BANK0 ] unsigned char 
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  4    2[COMMON] unsigned long 
  1827 ;; Registers used:
  1828 ;;		wreg, status,2, status,0
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1834 ;;      Params:         8       0       0       0
  1835 ;;      Locals:         0       5       0       0
  1836 ;;      Temps:          1       0       0       0
  1837 ;;      Totals:         9       5       0       0
  1838 ;;Total ram usage:       14 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    1
  1841 ;; This function calls:
  1842 ;;		Nothing
  1843 ;; This function is called by:
  1844 ;;		_printf
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           
  1849                           ;psect for function ___lldiv
  1850  04B4                     ___lldiv:	
  1851                           
  1852                           ;incstack = 0
  1853                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1854  04B4  3000               	movlw	0
  1855  04B5  0020               	movlb	0	; select bank0
  1856  04B6  00A3               	movwf	___lldiv@quotient+3
  1857  04B7  3000               	movlw	0
  1858  04B8  00A2               	movwf	___lldiv@quotient+2
  1859  04B9  3000               	movlw	0
  1860  04BA  00A1               	movwf	___lldiv@quotient+1
  1861  04BB  3000               	movlw	0
  1862  04BC  00A0               	movwf	___lldiv@quotient
  1863  04BD  0875               	movf	___lldiv@divisor+3,w
  1864  04BE  0474               	iorwf	___lldiv@divisor+2,w
  1865  04BF  0473               	iorwf	___lldiv@divisor+1,w
  1866  04C0  0472               	iorwf	___lldiv@divisor,w
  1867  04C1  1903               	skipnz
  1868  04C2  2CFE               	goto	l1109
  1869  04C3  01A4               	clrf	___lldiv@counter
  1870  04C4  0AA4               	incf	___lldiv@counter,f
  1871  04C5                     l1095:	
  1872  04C5  1BF5               	btfsc	___lldiv@divisor+3,7
  1873  04C6  2CD3               	goto	l1097
  1874  04C7  3001               	movlw	1
  1875  04C8                     u915:	
  1876  04C8  35F2               	lslf	___lldiv@divisor,f
  1877  04C9  0DF3               	rlf	___lldiv@divisor+1,f
  1878  04CA  0DF4               	rlf	___lldiv@divisor+2,f
  1879  04CB  0DF5               	rlf	___lldiv@divisor+3,f
  1880  04CC  0B89               	decfsz	9,f
  1881  04CD  2CC8               	goto	u915
  1882  04CE  3001               	movlw	1
  1883  04CF  00FA               	movwf	??___lldiv
  1884  04D0  087A               	movf	??___lldiv,w
  1885  04D1  07A4               	addwf	___lldiv@counter,f
  1886  04D2  2CC5               	goto	l1095
  1887  04D3                     l1097:	
  1888  04D3  3001               	movlw	1
  1889  04D4                     u935:	
  1890  04D4  35A0               	lslf	___lldiv@quotient,f
  1891  04D5  0DA1               	rlf	___lldiv@quotient+1,f
  1892  04D6  0DA2               	rlf	___lldiv@quotient+2,f
  1893  04D7  0DA3               	rlf	___lldiv@quotient+3,f
  1894  04D8  0B89               	decfsz	9,f
  1895  04D9  2CD4               	goto	u935
  1896  04DA  0875               	movf	___lldiv@divisor+3,w
  1897  04DB  0279               	subwf	___lldiv@dividend+3,w
  1898  04DC  1D03               	skipz
  1899  04DD  2CE8               	goto	u945
  1900  04DE  0874               	movf	___lldiv@divisor+2,w
  1901  04DF  0278               	subwf	___lldiv@dividend+2,w
  1902  04E0  1D03               	skipz
  1903  04E1  2CE8               	goto	u945
  1904  04E2  0873               	movf	___lldiv@divisor+1,w
  1905  04E3  0277               	subwf	___lldiv@dividend+1,w
  1906  04E4  1D03               	skipz
  1907  04E5  2CE8               	goto	u945
  1908  04E6  0872               	movf	___lldiv@divisor,w
  1909  04E7  0276               	subwf	___lldiv@dividend,w
  1910  04E8                     u945:	
  1911  04E8  1C03               	skipc
  1912  04E9  2CF3               	goto	l1105
  1913  04EA  0872               	movf	___lldiv@divisor,w
  1914  04EB  02F6               	subwf	___lldiv@dividend,f
  1915  04EC  0873               	movf	___lldiv@divisor+1,w
  1916  04ED  3BF7               	subwfb	___lldiv@dividend+1,f
  1917  04EE  0874               	movf	___lldiv@divisor+2,w
  1918  04EF  3BF8               	subwfb	___lldiv@dividend+2,f
  1919  04F0  0875               	movf	___lldiv@divisor+3,w
  1920  04F1  3BF9               	subwfb	___lldiv@dividend+3,f
  1921  04F2  1420               	bsf	___lldiv@quotient,0
  1922  04F3                     l1105:	
  1923  04F3  3001               	movlw	1
  1924  04F4                     u955:	
  1925  04F4  36F5               	lsrf	___lldiv@divisor+3,f
  1926  04F5  0CF4               	rrf	___lldiv@divisor+2,f
  1927  04F6  0CF3               	rrf	___lldiv@divisor+1,f
  1928  04F7  0CF2               	rrf	___lldiv@divisor,f
  1929  04F8  0B89               	decfsz	9,f
  1930  04F9  2CF4               	goto	u955
  1931  04FA  3001               	movlw	1
  1932  04FB  02A4               	subwf	___lldiv@counter,f
  1933  04FC  1D03               	btfss	3,2
  1934  04FD  2CD3               	goto	l1097
  1935  04FE                     l1109:	
  1936  04FE  0823               	movf	___lldiv@quotient+3,w
  1937  04FF  00F5               	movwf	?___lldiv+3
  1938  0500  0822               	movf	___lldiv@quotient+2,w
  1939  0501  00F4               	movwf	?___lldiv+2
  1940  0502  0821               	movf	___lldiv@quotient+1,w
  1941  0503  00F3               	movwf	?___lldiv+1
  1942  0504  0820               	movf	___lldiv@quotient,w
  1943  0505  00F2               	movwf	?___lldiv
  1944  0506  0008               	return
  1945  0507                     __end_of___lldiv:	
  1946                           
  1947                           	psect	text7
  1948  0362                     __ptext7:	
  1949 ;; *************** function ___fttol *****************
  1950 ;; Defined at:
  1951 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  f1              3   24[BANK0 ] float 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  lval            4   33[BANK0 ] unsigned long 
  1956 ;;  exp1            1   37[BANK0 ] unsigned char 
  1957 ;;  sign1           1   32[BANK0 ] unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  4   24[BANK0 ] long 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1967 ;;      Params:         0       4       0       0
  1968 ;;      Locals:         0       6       0       0
  1969 ;;      Temps:          0       4       0       0
  1970 ;;      Totals:         0      14       0       0
  1971 ;;Total ram usage:       14 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_read_ADC0
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function ___fttol
  1983  0362                     ___fttol:	
  1984                           
  1985                           ;incstack = 0
  1986                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1987  0362  0020               	movlb	0	; select bank0
  1988  0363  0838               	movf	___fttol@f1,w
  1989  0364  00BC               	movwf	??___fttol
  1990  0365  0839               	movf	___fttol@f1+1,w
  1991  0366  00BD               	movwf	??___fttol+1
  1992  0367  083A               	movf	___fttol@f1+2,w
  1993  0368  00BE               	movwf	??___fttol+2
  1994  0369  1003               	clrc
  1995  036A  0D3D               	rlf	??___fttol+1,w
  1996  036B  0D3E               	rlf	??___fttol+2,w
  1997  036C  00BF               	movwf	??___fttol+3
  1998  036D  083F               	movf	??___fttol+3,w
  1999  036E  00C5               	movwf	___fttol@exp1
  2000  036F  0845               	movf	___fttol@exp1,w
  2001  0370  1D03               	btfss	3,2
  2002  0371  2B7B               	goto	l1273
  2003  0372  3000               	movlw	0
  2004  0373  00BB               	movwf	?___fttol+3
  2005  0374  3000               	movlw	0
  2006  0375  00BA               	movwf	?___fttol+2
  2007  0376  3000               	movlw	0
  2008  0377  00B9               	movwf	?___fttol+1
  2009  0378  3000               	movlw	0
  2010  0379  00B8               	movwf	?___fttol
  2011  037A  0008               	return
  2012  037B                     l1273:	
  2013  037B  0838               	movf	___fttol@f1,w
  2014  037C  00BC               	movwf	??___fttol
  2015  037D  0839               	movf	___fttol@f1+1,w
  2016  037E  00BD               	movwf	??___fttol+1
  2017  037F  083A               	movf	___fttol@f1+2,w
  2018  0380  00BE               	movwf	??___fttol+2
  2019  0381  3017               	movlw	23
  2020  0382                     u1295:	
  2021  0382  36BE               	lsrf	??___fttol+2,f
  2022  0383  0CBD               	rrf	??___fttol+1,f
  2023  0384  0CBC               	rrf	??___fttol,f
  2024  0385  0B89               	decfsz	9,f
  2025  0386  2B82               	goto	u1295
  2026  0387  083C               	movf	??___fttol,w
  2027  0388  00BF               	movwf	??___fttol+3
  2028  0389  083F               	movf	??___fttol+3,w
  2029  038A  00C0               	movwf	___fttol@sign1
  2030  038B  17B9               	bsf	___fttol@f1+1,7
  2031  038C  30FF               	movlw	255
  2032  038D  05B8               	andwf	___fttol@f1,f
  2033  038E  30FF               	movlw	255
  2034  038F  05B9               	andwf	___fttol@f1+1,f
  2035  0390  3000               	movlw	0
  2036  0391  05BA               	andwf	___fttol@f1+2,f
  2037  0392  0838               	movf	___fttol@f1,w
  2038  0393  00C1               	movwf	___fttol@lval
  2039  0394  0839               	movf	___fttol@f1+1,w
  2040  0395  00C2               	movwf	___fttol@lval+1
  2041  0396  083A               	movf	___fttol@f1+2,w
  2042  0397  00C3               	movwf	___fttol@lval+2
  2043  0398  01C4               	clrf	___fttol@lval+3
  2044  0399  308E               	movlw	142
  2045  039A  02C5               	subwf	___fttol@exp1,f
  2046  039B  1FC5               	btfss	___fttol@exp1,7
  2047  039C  2BB9               	goto	l1293
  2048  039D  0845               	movf	___fttol@exp1,w
  2049  039E  3A80               	xorlw	128
  2050  039F  3E8F               	addlw	143
  2051  03A0  1803               	skipnc
  2052  03A1  2BAB               	goto	l1291
  2053  03A2  3000               	movlw	0
  2054  03A3  00BB               	movwf	?___fttol+3
  2055  03A4  3000               	movlw	0
  2056  03A5  00BA               	movwf	?___fttol+2
  2057  03A6  3000               	movlw	0
  2058  03A7  00B9               	movwf	?___fttol+1
  2059  03A8  3000               	movlw	0
  2060  03A9  00B8               	movwf	?___fttol
  2061  03AA  0008               	return
  2062  03AB                     l1291:	
  2063  03AB  3001               	movlw	1
  2064  03AC                     u1325:	
  2065  03AC  36C4               	lsrf	___fttol@lval+3,f
  2066  03AD  0CC3               	rrf	___fttol@lval+2,f
  2067  03AE  0CC2               	rrf	___fttol@lval+1,f
  2068  03AF  0CC1               	rrf	___fttol@lval,f
  2069  03B0  0B89               	decfsz	9,f
  2070  03B1  2BAC               	goto	u1325
  2071  03B2  3001               	movlw	1
  2072  03B3  00BC               	movwf	??___fttol
  2073  03B4  083C               	movf	??___fttol,w
  2074  03B5  07C5               	addwf	___fttol@exp1,f
  2075  03B6  1903               	btfsc	3,2
  2076  03B7  2BD2               	goto	l1301
  2077  03B8  2BAB               	goto	l1291
  2078  03B9                     l1293:	
  2079  03B9  3018               	movlw	24
  2080  03BA  0245               	subwf	___fttol@exp1,w
  2081  03BB  1C03               	skipc
  2082  03BC  2BCF               	goto	l530
  2083  03BD  3000               	movlw	0
  2084  03BE  00BB               	movwf	?___fttol+3
  2085  03BF  3000               	movlw	0
  2086  03C0  00BA               	movwf	?___fttol+2
  2087  03C1  3000               	movlw	0
  2088  03C2  00B9               	movwf	?___fttol+1
  2089  03C3  3000               	movlw	0
  2090  03C4  00B8               	movwf	?___fttol
  2091  03C5  0008               	return
  2092  03C6                     l1299:	
  2093  03C6  3001               	movlw	1
  2094  03C7                     u1355:	
  2095  03C7  35C1               	lslf	___fttol@lval,f
  2096  03C8  0DC2               	rlf	___fttol@lval+1,f
  2097  03C9  0DC3               	rlf	___fttol@lval+2,f
  2098  03CA  0DC4               	rlf	___fttol@lval+3,f
  2099  03CB  0B89               	decfsz	9,f
  2100  03CC  2BC7               	goto	u1355
  2101  03CD  3001               	movlw	1
  2102  03CE  02C5               	subwf	___fttol@exp1,f
  2103  03CF                     l530:	
  2104  03CF  0845               	movf	___fttol@exp1,w
  2105  03D0  1D03               	btfss	3,2
  2106  03D1  2BC6               	goto	l1299
  2107  03D2                     l1301:	
  2108  03D2  0840               	movf	___fttol@sign1,w
  2109  03D3  1903               	btfsc	3,2
  2110  03D4  2BE0               	goto	l1305
  2111  03D5  09C1               	comf	___fttol@lval,f
  2112  03D6  09C2               	comf	___fttol@lval+1,f
  2113  03D7  09C3               	comf	___fttol@lval+2,f
  2114  03D8  09C4               	comf	___fttol@lval+3,f
  2115  03D9  0AC1               	incf	___fttol@lval,f
  2116  03DA  1903               	skipnz
  2117  03DB  0AC2               	incf	___fttol@lval+1,f
  2118  03DC  1903               	skipnz
  2119  03DD  0AC3               	incf	___fttol@lval+2,f
  2120  03DE  1903               	skipnz
  2121  03DF  0AC4               	incf	___fttol@lval+3,f
  2122  03E0                     l1305:	
  2123  03E0  0844               	movf	___fttol@lval+3,w
  2124  03E1  00BB               	movwf	?___fttol+3
  2125  03E2  0843               	movf	___fttol@lval+2,w
  2126  03E3  00BA               	movwf	?___fttol+2
  2127  03E4  0842               	movf	___fttol@lval+1,w
  2128  03E5  00B9               	movwf	?___fttol+1
  2129  03E6  0841               	movf	___fttol@lval,w
  2130  03E7  00B8               	movwf	?___fttol
  2131  03E8  0008               	return
  2132  03E9                     __end_of___fttol:	
  2133                           
  2134                           	psect	text8
  2135  0227                     __ptext8:	
  2136 ;; *************** function ___ftmul *****************
  2137 ;; Defined at:
  2138 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  f1              3    8[BANK0 ] float 
  2141 ;;  f2              3   11[BANK0 ] float 
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  2144 ;;  sign            1   23[BANK0 ] unsigned char 
  2145 ;;  cntr            1   22[BANK0 ] unsigned char 
  2146 ;;  exp             1   18[BANK0 ] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  3    8[BANK0 ] float 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, pclath, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2156 ;;      Params:         0       6       0       0
  2157 ;;      Locals:         0       6       0       0
  2158 ;;      Temps:          0       4       0       0
  2159 ;;      Totals:         0      16       0       0
  2160 ;;Total ram usage:       16 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    2
  2163 ;; This function calls:
  2164 ;;		___ftpack
  2165 ;; This function is called by:
  2166 ;;		_read_ADC0
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           
  2171                           ;psect for function ___ftmul
  2172  0227                     ___ftmul:	
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2176  0227  0020               	movlb	0	; select bank0
  2177  0228  0828               	movf	___ftmul@f1,w
  2178  0229  00AE               	movwf	??___ftmul
  2179  022A  0829               	movf	___ftmul@f1+1,w
  2180  022B  00AF               	movwf	??___ftmul+1
  2181  022C  082A               	movf	___ftmul@f1+2,w
  2182  022D  00B0               	movwf	??___ftmul+2
  2183  022E  1003               	clrc
  2184  022F  0D2F               	rlf	??___ftmul+1,w
  2185  0230  0D30               	rlf	??___ftmul+2,w
  2186  0231  00B1               	movwf	??___ftmul+3
  2187  0232  0831               	movf	??___ftmul+3,w
  2188  0233  00B2               	movwf	___ftmul@exp
  2189  0234  0832               	movf	___ftmul@exp,w
  2190  0235  1D03               	btfss	3,2
  2191  0236  2A3E               	goto	l1223
  2192  0237  3000               	movlw	0
  2193  0238  00A8               	movwf	?___ftmul
  2194  0239  3000               	movlw	0
  2195  023A  00A9               	movwf	?___ftmul+1
  2196  023B  3000               	movlw	0
  2197  023C  00AA               	movwf	?___ftmul+2
  2198  023D  0008               	return
  2199  023E                     l1223:	
  2200  023E  082B               	movf	___ftmul@f2,w
  2201  023F  00AE               	movwf	??___ftmul
  2202  0240  082C               	movf	___ftmul@f2+1,w
  2203  0241  00AF               	movwf	??___ftmul+1
  2204  0242  082D               	movf	___ftmul@f2+2,w
  2205  0243  00B0               	movwf	??___ftmul+2
  2206  0244  1003               	clrc
  2207  0245  0D2F               	rlf	??___ftmul+1,w
  2208  0246  0D30               	rlf	??___ftmul+2,w
  2209  0247  00B1               	movwf	??___ftmul+3
  2210  0248  0831               	movf	??___ftmul+3,w
  2211  0249  00B7               	movwf	___ftmul@sign
  2212  024A  0837               	movf	___ftmul@sign,w
  2213  024B  1D03               	btfss	3,2
  2214  024C  2A54               	goto	l1229
  2215  024D  3000               	movlw	0
  2216  024E  00A8               	movwf	?___ftmul
  2217  024F  3000               	movlw	0
  2218  0250  00A9               	movwf	?___ftmul+1
  2219  0251  3000               	movlw	0
  2220  0252  00AA               	movwf	?___ftmul+2
  2221  0253  0008               	return
  2222  0254                     l1229:	
  2223  0254  0837               	movf	___ftmul@sign,w
  2224  0255  3E7B               	addlw	123
  2225  0256  00AE               	movwf	??___ftmul
  2226  0257  082E               	movf	??___ftmul,w
  2227  0258  07B2               	addwf	___ftmul@exp,f
  2228  0259  0828               	movf	___ftmul@f1,w
  2229  025A  00AE               	movwf	??___ftmul
  2230  025B  0829               	movf	___ftmul@f1+1,w
  2231  025C  00AF               	movwf	??___ftmul+1
  2232  025D  082A               	movf	___ftmul@f1+2,w
  2233  025E  00B0               	movwf	??___ftmul+2
  2234  025F  3010               	movlw	16
  2235  0260                     u1185:	
  2236  0260  36B0               	lsrf	??___ftmul+2,f
  2237  0261  0CAF               	rrf	??___ftmul+1,f
  2238  0262  0CAE               	rrf	??___ftmul,f
  2239  0263  0B89               	decfsz	9,f
  2240  0264  2A60               	goto	u1185
  2241  0265  082E               	movf	??___ftmul,w
  2242  0266  00B1               	movwf	??___ftmul+3
  2243  0267  0831               	movf	??___ftmul+3,w
  2244  0268  00B7               	movwf	___ftmul@sign
  2245  0269  082B               	movf	___ftmul@f2,w
  2246  026A  00AE               	movwf	??___ftmul
  2247  026B  082C               	movf	___ftmul@f2+1,w
  2248  026C  00AF               	movwf	??___ftmul+1
  2249  026D  082D               	movf	___ftmul@f2+2,w
  2250  026E  00B0               	movwf	??___ftmul+2
  2251  026F  3010               	movlw	16
  2252  0270                     u1195:	
  2253  0270  36B0               	lsrf	??___ftmul+2,f
  2254  0271  0CAF               	rrf	??___ftmul+1,f
  2255  0272  0CAE               	rrf	??___ftmul,f
  2256  0273  0B89               	decfsz	9,f
  2257  0274  2A70               	goto	u1195
  2258  0275  082E               	movf	??___ftmul,w
  2259  0276  00B1               	movwf	??___ftmul+3
  2260  0277  0831               	movf	??___ftmul+3,w
  2261  0278  06B7               	xorwf	___ftmul@sign,f
  2262  0279  3080               	movlw	128
  2263  027A  00AE               	movwf	??___ftmul
  2264  027B  082E               	movf	??___ftmul,w
  2265  027C  05B7               	andwf	___ftmul@sign,f
  2266  027D  17A9               	bsf	___ftmul@f1+1,7
  2267  027E  17AC               	bsf	___ftmul@f2+1,7
  2268  027F  30FF               	movlw	255
  2269  0280  05AB               	andwf	___ftmul@f2,f
  2270  0281  30FF               	movlw	255
  2271  0282  05AC               	andwf	___ftmul@f2+1,f
  2272  0283  3000               	movlw	0
  2273  0284  05AD               	andwf	___ftmul@f2+2,f
  2274  0285  3000               	movlw	0
  2275  0286  00B3               	movwf	___ftmul@f3_as_product
  2276  0287  3000               	movlw	0
  2277  0288  00B4               	movwf	___ftmul@f3_as_product+1
  2278  0289  3000               	movlw	0
  2279  028A  00B5               	movwf	___ftmul@f3_as_product+2
  2280  028B  3007               	movlw	7
  2281  028C  00AE               	movwf	??___ftmul
  2282  028D  082E               	movf	??___ftmul,w
  2283  028E  00B6               	movwf	___ftmul@cntr
  2284  028F                     l1241:	
  2285  028F  1C28               	btfss	___ftmul@f1,0
  2286  0290  2A97               	goto	l1245
  2287  0291  082B               	movf	___ftmul@f2,w
  2288  0292  07B3               	addwf	___ftmul@f3_as_product,f
  2289  0293  082C               	movf	___ftmul@f2+1,w
  2290  0294  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  2291  0295  082D               	movf	___ftmul@f2+2,w
  2292  0296  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  2293  0297                     l1245:	
  2294  0297  3001               	movlw	1
  2295  0298                     u1215:	
  2296  0298  36AA               	lsrf	___ftmul@f1+2,f
  2297  0299  0CA9               	rrf	___ftmul@f1+1,f
  2298  029A  0CA8               	rrf	___ftmul@f1,f
  2299  029B  0B89               	decfsz	9,f
  2300  029C  2A98               	goto	u1215
  2301  029D  3001               	movlw	1
  2302  029E                     u1225:	
  2303  029E  35AB               	lslf	___ftmul@f2,f
  2304  029F  0DAC               	rlf	___ftmul@f2+1,f
  2305  02A0  0DAD               	rlf	___ftmul@f2+2,f
  2306  02A1  0B89               	decfsz	9,f
  2307  02A2  2A9E               	goto	u1225
  2308  02A3  3001               	movlw	1
  2309  02A4  02B6               	subwf	___ftmul@cntr,f
  2310  02A5  1D03               	btfss	3,2
  2311  02A6  2A8F               	goto	l1241
  2312  02A7  3009               	movlw	9
  2313  02A8  00AE               	movwf	??___ftmul
  2314  02A9  082E               	movf	??___ftmul,w
  2315  02AA  00B6               	movwf	___ftmul@cntr
  2316  02AB                     l1253:	
  2317  02AB  1C28               	btfss	___ftmul@f1,0
  2318  02AC  2AB3               	goto	l1257
  2319  02AD  082B               	movf	___ftmul@f2,w
  2320  02AE  07B3               	addwf	___ftmul@f3_as_product,f
  2321  02AF  082C               	movf	___ftmul@f2+1,w
  2322  02B0  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  2323  02B1  082D               	movf	___ftmul@f2+2,w
  2324  02B2  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  2325  02B3                     l1257:	
  2326  02B3  3001               	movlw	1
  2327  02B4                     u1255:	
  2328  02B4  36AA               	lsrf	___ftmul@f1+2,f
  2329  02B5  0CA9               	rrf	___ftmul@f1+1,f
  2330  02B6  0CA8               	rrf	___ftmul@f1,f
  2331  02B7  0B89               	decfsz	9,f
  2332  02B8  2AB4               	goto	u1255
  2333  02B9  3001               	movlw	1
  2334  02BA                     u1265:	
  2335  02BA  36B5               	lsrf	___ftmul@f3_as_product+2,f
  2336  02BB  0CB4               	rrf	___ftmul@f3_as_product+1,f
  2337  02BC  0CB3               	rrf	___ftmul@f3_as_product,f
  2338  02BD  0B89               	decfsz	9,f
  2339  02BE  2ABA               	goto	u1265
  2340  02BF  3001               	movlw	1
  2341  02C0  02B6               	subwf	___ftmul@cntr,f
  2342  02C1  1D03               	btfss	3,2
  2343  02C2  2AAB               	goto	l1253
  2344  02C3  0833               	movf	___ftmul@f3_as_product,w
  2345  02C4  00F2               	movwf	___ftpack@arg
  2346  02C5  0834               	movf	___ftmul@f3_as_product+1,w
  2347  02C6  00F3               	movwf	___ftpack@arg+1
  2348  02C7  0835               	movf	___ftmul@f3_as_product+2,w
  2349  02C8  00F4               	movwf	___ftpack@arg+2
  2350  02C9  0832               	movf	___ftmul@exp,w
  2351  02CA  00AE               	movwf	??___ftmul
  2352  02CB  082E               	movf	??___ftmul,w
  2353  02CC  00F5               	movwf	___ftpack@exp
  2354  02CD  0837               	movf	___ftmul@sign,w
  2355  02CE  00AF               	movwf	??___ftmul+1
  2356  02CF  082F               	movf	??___ftmul+1,w
  2357  02D0  00F6               	movwf	___ftpack@sign
  2358  02D1  3184  2450         	fcall	___ftpack
  2359  02D3  0872               	movf	?___ftpack,w
  2360  02D4  0020               	movlb	0	; select bank0
  2361  02D5  00A8               	movwf	?___ftmul
  2362  02D6  0873               	movf	?___ftpack+1,w
  2363  02D7  00A9               	movwf	?___ftmul+1
  2364  02D8  0874               	movf	?___ftpack+2,w
  2365  02D9  00AA               	movwf	?___ftmul+2
  2366  02DA  0008               	return
  2367  02DB                     __end_of___ftmul:	
  2368                           
  2369                           	psect	text9
  2370  0593                     __ptext9:	
  2371 ;; *************** function ___altoft *****************
  2372 ;; Defined at:
  2373 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;  c               4    0[BANK0 ] long 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  sign            1    7[BANK0 ] unsigned char 
  2378 ;;  exp             1    6[BANK0 ] unsigned char 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  3    0[BANK0 ] float 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0, pclath, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2388 ;;      Params:         0       4       0       0
  2389 ;;      Locals:         0       2       0       0
  2390 ;;      Temps:          0       2       0       0
  2391 ;;      Totals:         0       8       0       0
  2392 ;;Total ram usage:        8 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    2
  2395 ;; This function calls:
  2396 ;;		___ftpack
  2397 ;; This function is called by:
  2398 ;;		_read_ADC0
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           
  2403                           ;psect for function ___altoft
  2404  0593                     ___altoft:	
  2405                           
  2406                           ;incstack = 0
  2407                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2408  0593  0020               	movlb	0	; select bank0
  2409  0594  01A7               	clrf	___altoft@sign
  2410  0595  308E               	movlw	142
  2411  0596  00A4               	movwf	??___altoft
  2412  0597  0824               	movf	??___altoft,w
  2413  0598  00A6               	movwf	___altoft@exp
  2414  0599  1FA3               	btfss	___altoft@c+3,7
  2415  059A  2DA8               	goto	l1531
  2416  059B  09A0               	comf	___altoft@c,f
  2417  059C  09A1               	comf	___altoft@c+1,f
  2418  059D  09A2               	comf	___altoft@c+2,f
  2419  059E  09A3               	comf	___altoft@c+3,f
  2420  059F  0AA0               	incf	___altoft@c,f
  2421  05A0  1903               	skipnz
  2422  05A1  0AA1               	incf	___altoft@c+1,f
  2423  05A2  1903               	skipnz
  2424  05A3  0AA2               	incf	___altoft@c+2,f
  2425  05A4  1903               	skipnz
  2426  05A5  0AA3               	incf	___altoft@c+3,f
  2427  05A6  01A7               	clrf	___altoft@sign
  2428  05A7  0AA7               	incf	___altoft@sign,f
  2429  05A8                     l1531:	
  2430  05A8  30FF               	movlw	255
  2431  05A9  0523               	andwf	___altoft@c+3,w
  2432  05AA  1903               	btfsc	3,2
  2433  05AB  2DB8               	goto	l1533
  2434  05AC  3001               	movlw	1
  2435  05AD                     u1695:	
  2436  05AD  36A3               	lsrf	___altoft@c+3,f
  2437  05AE  0CA2               	rrf	___altoft@c+2,f
  2438  05AF  0CA1               	rrf	___altoft@c+1,f
  2439  05B0  0CA0               	rrf	___altoft@c,f
  2440  05B1  0B89               	decfsz	9,f
  2441  05B2  2DAD               	goto	u1695
  2442  05B3  3001               	movlw	1
  2443  05B4  00A4               	movwf	??___altoft
  2444  05B5  0824               	movf	??___altoft,w
  2445  05B6  07A6               	addwf	___altoft@exp,f
  2446  05B7  2DA8               	goto	l1531
  2447  05B8                     l1533:	
  2448  05B8  0820               	movf	___altoft@c,w
  2449  05B9  00F2               	movwf	___ftpack@arg
  2450  05BA  0821               	movf	___altoft@c+1,w
  2451  05BB  00F3               	movwf	___ftpack@arg+1
  2452  05BC  0822               	movf	___altoft@c+2,w
  2453  05BD  00F4               	movwf	___ftpack@arg+2
  2454  05BE  0826               	movf	___altoft@exp,w
  2455  05BF  00A4               	movwf	??___altoft
  2456  05C0  0824               	movf	??___altoft,w
  2457  05C1  00F5               	movwf	___ftpack@exp
  2458  05C2  0827               	movf	___altoft@sign,w
  2459  05C3  00A5               	movwf	??___altoft+1
  2460  05C4  0825               	movf	??___altoft+1,w
  2461  05C5  00F6               	movwf	___ftpack@sign
  2462  05C6  3184  2450         	fcall	___ftpack
  2463  05C8  0872               	movf	?___ftpack,w
  2464  05C9  0020               	movlb	0	; select bank0
  2465  05CA  00A0               	movwf	?___altoft
  2466  05CB  0873               	movf	?___ftpack+1,w
  2467  05CC  00A1               	movwf	?___altoft+1
  2468  05CD  0874               	movf	?___ftpack+2,w
  2469  05CE  00A2               	movwf	?___altoft+2
  2470  05CF  0008               	return
  2471  05D0                     __end_of___altoft:	
  2472                           
  2473                           	psect	text10
  2474  0450                     __ptext10:	
  2475 ;; *************** function ___ftpack *****************
  2476 ;; Defined at:
  2477 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  arg             3    2[COMMON] unsigned um
  2480 ;;  exp             1    5[COMMON] unsigned char 
  2481 ;;  sign            1    6[COMMON] unsigned char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;		None
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  3    2[COMMON] float 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2493 ;;      Params:         5       0       0       0
  2494 ;;      Locals:         0       0       0       0
  2495 ;;      Temps:          3       0       0       0
  2496 ;;      Totals:         8       0       0       0
  2497 ;;Total ram usage:        8 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    1
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		___altoft
  2504 ;;		___ftmul
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           
  2509                           ;psect for function ___ftpack
  2510  0450                     ___ftpack:	
  2511                           
  2512                           ;incstack = 0
  2513                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2514  0450  0875               	movf	___ftpack@exp,w
  2515  0451  1903               	btfsc	3,2
  2516  0452  2C58               	goto	l1061
  2517  0453  0874               	movf	___ftpack@arg+2,w
  2518  0454  0473               	iorwf	___ftpack@arg+1,w
  2519  0455  0472               	iorwf	___ftpack@arg,w
  2520  0456  1D03               	skipz
  2521  0457  2C69               	goto	l1067
  2522  0458                     l1061:	
  2523  0458  3000               	movlw	0
  2524  0459  00F2               	movwf	?___ftpack
  2525  045A  3000               	movlw	0
  2526  045B  00F3               	movwf	?___ftpack+1
  2527  045C  3000               	movlw	0
  2528  045D  00F4               	movwf	?___ftpack+2
  2529  045E  0008               	return
  2530  045F                     l1065:	
  2531  045F  3001               	movlw	1
  2532  0460  00F7               	movwf	??___ftpack
  2533  0461  0877               	movf	??___ftpack,w
  2534  0462  07F5               	addwf	___ftpack@exp,f
  2535  0463  3001               	movlw	1
  2536  0464                     u805:	
  2537  0464  36F4               	lsrf	___ftpack@arg+2,f
  2538  0465  0CF3               	rrf	___ftpack@arg+1,f
  2539  0466  0CF2               	rrf	___ftpack@arg,f
  2540  0467  0B89               	decfsz	9,f
  2541  0468  2C64               	goto	u805
  2542  0469                     l1067:	
  2543  0469  30FE               	movlw	254
  2544  046A  0574               	andwf	___ftpack@arg+2,w
  2545  046B  1903               	btfsc	3,2
  2546  046C  2C82               	goto	l439
  2547  046D  2C5F               	goto	l1065
  2548  046E                     l1069:	
  2549  046E  3001               	movlw	1
  2550  046F  00F7               	movwf	??___ftpack
  2551  0470  0877               	movf	??___ftpack,w
  2552  0471  07F5               	addwf	___ftpack@exp,f
  2553  0472  3001               	movlw	1
  2554  0473  07F2               	addwf	___ftpack@arg,f
  2555  0474  3000               	movlw	0
  2556  0475  1803               	skipnc
  2557  0476  3001               	movlw	1
  2558  0477  07F3               	addwf	___ftpack@arg+1,f
  2559  0478  3000               	movlw	0
  2560  0479  1803               	skipnc
  2561  047A  3001               	movlw	1
  2562  047B  07F4               	addwf	___ftpack@arg+2,f
  2563  047C  3001               	movlw	1
  2564  047D                     u825:	
  2565  047D  36F4               	lsrf	___ftpack@arg+2,f
  2566  047E  0CF3               	rrf	___ftpack@arg+1,f
  2567  047F  0CF2               	rrf	___ftpack@arg,f
  2568  0480  0B89               	decfsz	9,f
  2569  0481  2C7D               	goto	u825
  2570  0482                     l439:	
  2571  0482  30FF               	movlw	255
  2572  0483  0574               	andwf	___ftpack@arg+2,w
  2573  0484  1903               	btfsc	3,2
  2574  0485  2C8F               	goto	l1077
  2575  0486  2C6E               	goto	l1069
  2576  0487                     l1075:	
  2577  0487  3001               	movlw	1
  2578  0488  02F5               	subwf	___ftpack@exp,f
  2579  0489  3001               	movlw	1
  2580  048A                     u845:	
  2581  048A  35F2               	lslf	___ftpack@arg,f
  2582  048B  0DF3               	rlf	___ftpack@arg+1,f
  2583  048C  0DF4               	rlf	___ftpack@arg+2,f
  2584  048D  0B89               	decfsz	9,f
  2585  048E  2C8A               	goto	u845
  2586  048F                     l1077:	
  2587  048F  1BF3               	btfsc	___ftpack@arg+1,7
  2588  0490  2C95               	goto	l446
  2589  0491  3002               	movlw	2
  2590  0492  0275               	subwf	___ftpack@exp,w
  2591  0493  1803               	skipnc
  2592  0494  2C87               	goto	l1075
  2593  0495                     l446:	
  2594  0495  1875               	btfsc	___ftpack@exp,0
  2595  0496  2C9D               	goto	l447
  2596  0497  30FF               	movlw	255
  2597  0498  05F2               	andwf	___ftpack@arg,f
  2598  0499  307F               	movlw	127
  2599  049A  05F3               	andwf	___ftpack@arg+1,f
  2600  049B  30FF               	movlw	255
  2601  049C  05F4               	andwf	___ftpack@arg+2,f
  2602  049D                     l447:	
  2603  049D  1003               	clrc
  2604  049E  0CF5               	rrf	___ftpack@exp,f
  2605  049F  0875               	movf	___ftpack@exp,w
  2606  04A0  00F7               	movwf	??___ftpack
  2607  04A1  01F8               	clrf	??___ftpack+1
  2608  04A2  01F9               	clrf	??___ftpack+2
  2609  04A3  3010               	movlw	16
  2610  04A4                     u885:	
  2611  04A4  35F7               	lslf	??___ftpack,f
  2612  04A5  0DF8               	rlf	??___ftpack+1,f
  2613  04A6  0DF9               	rlf	??___ftpack+2,f
  2614  04A7  0B89               	decfsz	9,f
  2615  04A8  2CA4               	goto	u885
  2616  04A9  0877               	movf	??___ftpack,w
  2617  04AA  04F2               	iorwf	___ftpack@arg,f
  2618  04AB  0878               	movf	??___ftpack+1,w
  2619  04AC  04F3               	iorwf	___ftpack@arg+1,f
  2620  04AD  0879               	movf	??___ftpack+2,w
  2621  04AE  04F4               	iorwf	___ftpack@arg+2,f
  2622  04AF  0876               	movf	___ftpack@sign,w
  2623  04B0  1903               	btfsc	3,2
  2624  04B1  0008               	return
  2625  04B2  17F4               	bsf	___ftpack@arg+2,7
  2626  04B3  0008               	return
  2627  04B4                     __end_of___ftpack:	
  2628                           
  2629                           	psect	text11
  2630  03E9                     __ptext11:	
  2631 ;; *************** function _init_pic12f1840 *****************
  2632 ;; Defined at:
  2633 ;;		line 65 in file "main.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;		None
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  f               4    3[COMMON] long 
  2638 ;;  i               2    0        int 
  2639 ;;  data            1    0        unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2649 ;;      Params:         0       0       0       0
  2650 ;;      Locals:         4       0       0       0
  2651 ;;      Temps:          1       0       0       0
  2652 ;;      Totals:         5       0       0       0
  2653 ;;Total ram usage:        5 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    1
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_main
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           
  2664                           ;psect for function _init_pic12f1840
  2665  03E9                     _init_pic12f1840:	
  2666                           
  2667                           ;main.c: 66: int i;
  2668                           ;main.c: 67: long f;
  2669                           ;main.c: 68: char data;
  2670                           ;main.c: 70: OSCCON |= 0xC0;
  2671                           
  2672                           ;incstack = 0
  2673                           ; Regs used in _init_pic12f1840: [wreg+status,2+status,0]
  2674  03E9  30C0               	movlw	192
  2675  03EA  00F2               	movwf	??_init_pic12f1840
  2676  03EB  0872               	movf	??_init_pic12f1840,w
  2677  03EC  0021               	movlb	1	; select bank1
  2678  03ED  0499               	iorwf	25,f	;volatile
  2679                           
  2680                           ;main.c: 72: OSCTUNE = 0x00;
  2681  03EE  0198               	clrf	24	;volatile
  2682                           
  2683                           ;main.c: 74: for(f=0;f<10000;f++)
  2684  03EF  3000               	movlw	0
  2685  03F0  00F6               	movwf	init_pic12f1840@f+3
  2686  03F1  3000               	movlw	0
  2687  03F2  00F5               	movwf	init_pic12f1840@f+2
  2688  03F3  3000               	movlw	0
  2689  03F4  00F4               	movwf	init_pic12f1840@f+1
  2690  03F5  3000               	movlw	0
  2691  03F6  00F3               	movwf	init_pic12f1840@f
  2692  03F7  1BF6               	btfsc	init_pic12f1840@f+3,7
  2693  03F8  2C05               	goto	l125
  2694  03F9  0876               	movf	init_pic12f1840@f+3,w
  2695  03FA  1D03               	btfss	3,2
  2696  03FB  2C1C               	goto	l126
  2697  03FC  0875               	movf	init_pic12f1840@f+2,w
  2698  03FD  1D03               	btfss	3,2
  2699  03FE  2C1C               	goto	l126
  2700  03FF  3010               	movlw	16
  2701  0400  0273               	subwf	init_pic12f1840@f,w
  2702  0401  3027               	movlw	39
  2703  0402  3B74               	subwfb	init_pic12f1840@f+1,w
  2704  0403  1803               	btfsc	3,0
  2705  0404  2C1C               	goto	l126
  2706  0405                     l125:	
  2707                           
  2708                           ;main.c: 75: __nop();
  2709  0405  0000               	nop
  2710  0406  3001               	movlw	1
  2711  0407  07F3               	addwf	init_pic12f1840@f,f
  2712  0408  3000               	movlw	0
  2713  0409  3DF4               	addwfc	init_pic12f1840@f+1,f
  2714  040A  3000               	movlw	0
  2715  040B  3DF5               	addwfc	init_pic12f1840@f+2,f
  2716  040C  3000               	movlw	0
  2717  040D  3DF6               	addwfc	init_pic12f1840@f+3,f
  2718  040E  1BF6               	btfsc	init_pic12f1840@f+3,7
  2719  040F  2C05               	goto	l125
  2720  0410  0876               	movf	init_pic12f1840@f+3,w
  2721  0411  1D03               	btfss	3,2
  2722  0412  2C1C               	goto	l126
  2723  0413  0875               	movf	init_pic12f1840@f+2,w
  2724  0414  1D03               	btfss	3,2
  2725  0415  2C1C               	goto	l126
  2726  0416  3010               	movlw	16
  2727  0417  0273               	subwf	init_pic12f1840@f,w
  2728  0418  3027               	movlw	39
  2729  0419  3B74               	subwfb	init_pic12f1840@f+1,w
  2730  041A  1C03               	btfss	3,0
  2731  041B  2C05               	goto	l125
  2732  041C                     l126:	
  2733                           
  2734                           ;main.c: 77: RXDTSEL = 1;
  2735  041C  0022               	movlb	2	; select bank2
  2736  041D  179D               	bsf	29,7	;volatile
  2737                           
  2738                           ;main.c: 78: TXCKSEL = 1;
  2739  041E  151D               	bsf	29,2	;volatile
  2740                           
  2741                           ;main.c: 81: TRISA4 = 0;
  2742  041F  0021               	movlb	1	; select bank1
  2743  0420  120C               	bcf	12,4	;volatile
  2744                           
  2745                           ;main.c: 82: TRISA5 = 1;
  2746  0421  168C               	bsf	12,5	;volatile
  2747                           
  2748                           ;main.c: 85: SSPEN = 1;
  2749  0422  0024               	movlb	4	; select bank4
  2750  0423  1695               	bsf	21,5	;volatile
  2751                           
  2752                           ;main.c: 86: CKP = 1;
  2753  0424  1615               	bsf	21,4	;volatile
  2754                           
  2755                           ;main.c: 87: SSPM0 = 0;
  2756  0425  1015               	bcf	21,0	;volatile
  2757                           
  2758                           ;main.c: 88: SSPM1 = 1;
  2759  0426  1495               	bsf	21,1	;volatile
  2760                           
  2761                           ;main.c: 89: SSPM2 = 1;
  2762  0427  1515               	bsf	21,2	;volatile
  2763                           
  2764                           ;main.c: 90: SSPM3 = 0;
  2765  0428  1195               	bcf	21,3	;volatile
  2766                           
  2767                           ;main.c: 94: TRISA2 = 1;
  2768  0429  0021               	movlb	1	; select bank1
  2769  042A  150C               	bsf	12,2	;volatile
  2770                           
  2771                           ;main.c: 95: TRISA1 = 1;
  2772  042B  148C               	bsf	12,1	;volatile
  2773                           
  2774                           ;main.c: 102: SSP1ADD = 0xA0;
  2775  042C  30A0               	movlw	160
  2776  042D  0024               	movlb	4	; select bank4
  2777  042E  0092               	movwf	18	;volatile
  2778                           
  2779                           ;main.c: 117: SPBRGH = 0;
  2780  042F  0023               	movlb	3	; select bank3
  2781  0430  019C               	clrf	28	;volatile
  2782                           
  2783                           ;main.c: 118: SPBRGL = 0x19;
  2784  0431  3019               	movlw	25
  2785  0432  009B               	movwf	27	;volatile
  2786                           
  2787                           ;main.c: 121: SYNC = 0;
  2788  0433  121E               	bcf	30,4	;volatile
  2789                           
  2790                           ;main.c: 122: SPEN = 1;
  2791  0434  179D               	bsf	29,7	;volatile
  2792                           
  2793                           ;main.c: 123: TXEN = 1;
  2794  0435  169E               	bsf	30,5	;volatile
  2795                           
  2796                           ;main.c: 129: APFCON |= 0x01;
  2797  0436  0022               	movlb	2	; select bank2
  2798  0437  141D               	bsf	29,0	;volatile
  2799                           
  2800                           ;main.c: 130: TRISA5 = 1;
  2801  0438  0021               	movlb	1	; select bank1
  2802  0439  168C               	bsf	12,5	;volatile
  2803                           
  2804                           ;main.c: 131: PR2 = 0xFF;
  2805  043A  30FF               	movlw	255
  2806  043B  0020               	movlb	0	; select bank0
  2807  043C  009B               	movwf	27	;volatile
  2808                           
  2809                           ;main.c: 133: CCP1CON = 0x0C;
  2810  043D  300C               	movlw	12
  2811  043E  0025               	movlb	5	; select bank5
  2812  043F  0093               	movwf	19	;volatile
  2813                           
  2814                           ;main.c: 135: CCPR1L = 0;
  2815  0440  0191               	clrf	17	;volatile
  2816                           
  2817                           ;main.c: 138: PIR1 &= 0xFD;
  2818  0441  30FD               	movlw	253
  2819  0442  00F2               	movwf	??_init_pic12f1840
  2820  0443  0872               	movf	??_init_pic12f1840,w
  2821  0444  0020               	movlb	0	; select bank0
  2822  0445  0591               	andwf	17,f	;volatile
  2823                           
  2824                           ;main.c: 139: T2CON |= 0x03;
  2825  0446  3003               	movlw	3
  2826  0447  00F2               	movwf	??_init_pic12f1840
  2827  0448  0872               	movf	??_init_pic12f1840,w
  2828  0449  049C               	iorwf	28,f	;volatile
  2829                           
  2830                           ;main.c: 140: T2CON |= 0x04;
  2831  044A  151C               	bsf	28,2	;volatile
  2832                           
  2833                           ;main.c: 144: TRISA5 = 0;
  2834  044B  0021               	movlb	1	; select bank1
  2835  044C  128C               	bcf	12,5	;volatile
  2836                           
  2837                           ;main.c: 147: ADCON0 = 0x01;
  2838  044D  3001               	movlw	1
  2839  044E  009D               	movwf	29	;volatile
  2840  044F  0008               	return
  2841  0450                     __end_of_init_pic12f1840:	
  2842                           
  2843                           	psect	text12
  2844  0614                     __ptext12:	
  2845 ;; *************** function _getche *****************
  2846 ;; Defined at:
  2847 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\getche.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;		None
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;		None
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      unsigned char 
  2854 ;; Registers used:
  2855 ;;		wreg
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2861 ;;      Params:         0       0       0       0
  2862 ;;      Locals:         0       0       0       0
  2863 ;;      Temps:          0       0       0       0
  2864 ;;      Totals:         0       0       0       0
  2865 ;;Total ram usage:        0 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    1
  2868 ;; This function calls:
  2869 ;;		Nothing
  2870 ;; This function is called by:
  2871 ;;		_main
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           
  2876                           ;psect for function _getche
  2877  0614                     _getche:	
  2878                           
  2879                           ;incstack = 0
  2880                           ; Regs used in _getche: [wreg]
  2881  0614  3000               	movlw	0
  2882  0615  0008               	return
  2883  0616                     __end_of_getche:	
  2884                           
  2885                           	psect	intentry
  2886  0004                     __pintentry:	
  2887 ;; *************** function _REC_int *****************
  2888 ;; Defined at:
  2889 ;;		line 39 in file "main.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;		None
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2903 ;;      Params:         0       0       0       0
  2904 ;;      Locals:         0       0       0       0
  2905 ;;      Temps:          2       0       0       0
  2906 ;;      Totals:         2       0       0       0
  2907 ;;Total ram usage:        2 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		Interrupt level 1
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916  0004                     _REC_int:	
  2917                           
  2918                           ;incstack = 0
  2919                           ; Regs used in _REC_int: [wreg+fsr1l+fsr1h+status,2+status,0]
  2920  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2921  0005  3180               	pagesel	$
  2922  0006  0020               	movlb	0	; select bank0
  2923  0007  087F               	movf	127,w
  2924  0008  00F1               	movwf	??_REC_int+1
  2925                           
  2926                           ;main.c: 41: if(RCIF){
  2927  0009  1E91               	btfss	17,5	;volatile
  2928  000A  282F               	goto	i1l119
  2929                           
  2930                           ;main.c: 44: error = RCSTA;
  2931  000B  0023               	movlb	3	; select bank3
  2932  000C  081D               	movf	29,w	;volatile
  2933  000D  00F0               	movwf	??_REC_int
  2934  000E  0870               	movf	??_REC_int,w
  2935  000F  00FB               	movwf	_error
  2936                           
  2937                           ;main.c: 45: recieve_char = RCREG;
  2938  0010  0819               	movf	25,w	;volatile
  2939  0011  00F0               	movwf	??_REC_int
  2940  0012  0870               	movf	??_REC_int,w
  2941  0013  0020               	movlb	0	; select bank0
  2942  0014  00E8               	movwf	_recieve_char
  2943                           
  2944                           ;main.c: 47: if(rcv_str[rcv_char_index]==13||rcv_char_index>14){
  2945  0015  0867               	movf	_rcv_char_index,w
  2946  0016  3E57               	addlw	(low (_rcv_str| 0))& (0+255)
  2947  0017  0086               	movwf	6
  2948  0018  0187               	clrf	7
  2949  0019  300D               	movlw	13
  2950  001A  0601               	xorwf	1,w
  2951  001B  1903               	btfsc	3,2
  2952  001C  2821               	goto	i1l1407
  2953  001D  300F               	movlw	15
  2954  001E  0267               	subwf	_rcv_char_index,w
  2955  001F  1C03               	skipc
  2956  0020  282B               	goto	i1l1413
  2957  0021                     i1l1407:	
  2958                           
  2959                           ;main.c: 48: rcv_str[rcv_char_index]=0;
  2960  0021  0867               	movf	_rcv_char_index,w
  2961  0022  3E57               	addlw	(low (_rcv_str| 0))& (0+255)
  2962  0023  0086               	movwf	6
  2963  0024  0187               	clrf	7
  2964  0025  0181               	clrf	1
  2965                           
  2966                           ;main.c: 49: got_serial_string = 1;
  2967  0026  3001               	movlw	1
  2968  0027  00E5               	movwf	_got_serial_string
  2969  0028  3000               	movlw	0
  2970  0029  00E6               	movwf	_got_serial_string+1
  2971                           
  2972                           ;main.c: 50: rcv_char_index = 0;
  2973  002A  01E7               	clrf	_rcv_char_index
  2974  002B                     i1l1413:	
  2975                           
  2976                           ;main.c: 51: }
  2977                           ;main.c: 52: rcv_char_index++;
  2978  002B  3001               	movlw	1
  2979  002C  00F0               	movwf	??_REC_int
  2980  002D  0870               	movf	??_REC_int,w
  2981  002E  07E7               	addwf	_rcv_char_index,f
  2982  002F                     i1l119:	
  2983  002F  0871               	movf	??_REC_int+1,w
  2984  0030  00FF               	movwf	127
  2985  0031  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2986  0032  0009               	retfie
  2987  0033                     __end_of_REC_int:	
  2988  007E                     btemp	set	126	;btemp
  2989  007E                     int$flags	set	126
  2990  007E                     wtemp	set	126
  2991  007E                     wtemp0	set	126
  2992  0080                     wtemp1	set	128
  2993  0082                     wtemp2	set	130
  2994  0084                     wtemp3	set	132
  2995  0086                     wtemp4	set	134
  2996  0088                     wtemp5	set	136
  2997  007F                     wtemp6	set	127
  2998  007E                     ttemp	set	126
  2999  007E                     ttemp0	set	126
  3000  0081                     ttemp1	set	129
  3001  0084                     ttemp2	set	132
  3002  0087                     ttemp3	set	135
  3003  007F                     ttemp4	set	127
  3004  007E                     ltemp	set	126
  3005  007E                     ltemp0	set	126
  3006  0082                     ltemp1	set	130
  3007  0086                     ltemp2	set	134
  3008  0080                     ltemp3	set	128


Data Sizes:
    Strings     95
    Constant    40
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     55      73
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_4(CODE[32]), STR_3(CODE[24]), STR_2(CODE[14]), STR_1(CODE[25]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _printf->___lldiv
    ___llmod->___lldiv
    ___ftmul->___ftpack
    ___altoft->___ftpack

Critical Paths under _REC_int in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_read_ADC0
    _read_ADC0->___fttol
    _read_ADC0->_printf
    _printf->___llmod
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftmul->___altoft

Critical Paths under _REC_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _REC_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _REC_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    8542
                                             51 BANK0      4     4      0
                             _getche
                    _init_pic12f1840
                             _printf
                          _read_ADC0
                  _update_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _read_ADC0                                           13    13      0    6550
                                             38 BANK0     13    13      0
                           ___altoft
                            ___ftmul
                            ___fttol
                             _printf
                  _update_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _update_duty_cycle                                    6     4      2     295
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    1614
                                             15 BANK0     23    15      8
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     362
                                              5 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     268
                                              2 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     305
                                             24 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2061
                                              8 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    1898
                                              0 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1629
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _init_pic12f1840                                      8     8      0      46
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _getche                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _REC_int                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _getche
   _init_pic12f1840
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
   _read_ADC0
     ___altoft
       ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
     _update_duty_cycle
   _update_duty_cycle

 _REC_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      55       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     37      49       6       91.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      55      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jan 15 07:59:43 2021

              ___altoft@exp 0026                 __CFG_CP$OFF 0000               ___altoft@sign 0027  
                        l99 0607                         l125 0405                         l126 041C  
                       l134 051C                         l138 0546                         l147 018E  
                       l180 0095                         l149 0190                         l177 0065  
                       l530 03CF                         l194 0153                         l446 0495  
                       l447 049D                         l439 0482                         _CKP 10AC  
                       _GIE 005F                         _PR2 001B                __CFG_CPD$OFF 0000  
                       _SEN 10B0                         u805 0464                         u825 047D  
                       u915 04C8                         u845 048A                         u935 04D4  
                       u945 04E8                         u955 04F4                         u885 04A4  
     update_duty_cycle@duty 0072       update_duty_cycle@temp 0076                         wreg 0009  
               main@address 0056                __CFG_LVP$OFF 0000                 main@command 0055  
                      l1105 04F3                        l1061 0458                        l1301 03D2  
                      l1109 04FE                        l1223 023E                        l1065 045F  
                      l1241 028F                        l1305 03E0                        l1137 05DB  
                      l1075 0487                        l1067 0469                        l1077 048F  
                      l1069 046E                        l1253 02AB                        l1245 0297  
                      l1229 0254                        l1501 00D0                        l1095 04C5  
                      l1511 0105                        l1257 02B3                        l1273 037B  
                      l1097 04D3                        l1531 05A8                        l1291 03AB  
                      l1451 0559                        l1507 00FD                        l1533 05B8  
                      l1293 03B9                        l1453 0567                        l1461 058A  
                      l1517 010B                        l1471 0062                        l1519 0046  
                      l1457 057F                        l1473 0067                        l1481 0077  
                      l1561 01B1                        l1299 03C6                        l1571 0205  
                      l1477 0072                        l1565 01CF                        l1549 0170  
                      l1487 00A5                        l1575 020B                        l1497 00CA  
                      STR_1 0323                        STR_2 0354                        STR_3 033C  
                      STR_4 0303                        u1215 0298                        u1225 029E  
                      u1325 03AC                        u1255 02B4                        u1265 02BA  
                      u1185 0260                        u1195 0270                        u1355 03C7  
                      u1295 0382                        u1545 055C                        u1635 00F3  
                      u1565 0575                        u1575 0580                        u1735 01A6  
                      u1695 05AD                        _PEIE 005E                        _RCIE 048D  
                      _RCIF 008D                        _PIR1 0011                        _SPEN 0CEF  
                      _TXEN 0CF5                        _TXIF 008C                        _SYNC 0CF4  
           __end_of_REC_int 0033                        _main 0507                ___ftpack@arg 0072  
              ___ftpack@exp 0075                        fsr0h 0005                        fsr1h 0007  
                      fsr0l 0004                        indf0 0000                        indf1 0001  
                      fsr1l 0006                        btemp 007E                        ltemp 007E  
                      start 0033                        ttemp 007E                        wtemp 007E  
             __CFG_IESO$OFF 0000               __CFG_MCLRE$ON 0000                ___ftmul@cntr 0036  
              ___ftmul@sign 0037                ___fttol@exp1 0045                ___fttol@lval 0041  
             __CFG_PLLEN$ON 0000                       ?_main 0070               __CFG_WDTE$OFF 0000  
           __end_of___lldiv 0507             __end_of___ftmul 02DB             __end_of___llmod 0593  
           __end_of___fttol 03E9                       _T2CON 001C                       i1l119 002F  
                     _RCREG 0199                       _RCSTA 019D                       _SSPM0 10A8  
                     _SSPM1 10A9                       _SSPM2 10AA                       _SSPM3 10AB  
                     _TRISA 008C                       _SSPEN 10AD                       _TXREG 019A  
            __CFG_FCMEN$OFF 0000             __end_of_dpowers 0303                       _error 007B  
             ___ftpack@sign 0076                       _putch 0606              __CFG_BOREN$OFF 0000  
                     ltemp0 007E                       ltemp1 0082                       ltemp2 0086  
                     ltemp3 0080                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F             __initialization 0035  
              __end_of_main 0550                      ??_main 0053               ___fttol@sign1 0040  
           _init_pic12f1840 03E9                   ??_REC_int 0070                      _ADCON0 009D  
                    _ADCON1 009E            __end_of___altoft 05D0            ___llmod@dividend 0029  
                    _ADRESH 009C                      _ADRESL 009B                      _CCPR1L 0291  
                    _APFCON 011D                      _ANSELA 018C                      ?_putch 0070  
          __end_of___ftpack 04B4                      i1l1413 002B                      i1l1407 0021  
                    _OSCCON 0099           _update_duty_cycle 05D0              _rcv_char_index 0067  
                    _SPBRGH 019C                      _SPBRGL 019B                      _SSP1IF 008B  
                    _TRISA1 0461                      _TRISA2 0462                      _TRISA4 0464  
                    _TRISA5 0465          ?_update_duty_cycle 0072              __CFG_PWRTE$OFF 0000  
       ??_update_duty_cycle 0074                   ??___lldiv 007A                   ??___ftmul 002E  
                 ??___llmod 002D                   ??___fttol 003C                      _getche 0614  
                    _printf 0041       ___ftmul@f3_as_product 0033         read_ADC0@DoubleWord 004F  
 __end_of_update_duty_cycle 0606     __end_of__initialization 003D                  ___altoft@c 0020  
                ___ftmul@f1 0028                  ___ftmul@f2 002B                  ___fttol@f1 0038  
            __pcstackCOMMON 0070     __end_of_init_pic12f1840 0450               __end_of_putch 060E  
                   ??_putch 0072                  __pbssBANK0 0057          __size_of_read_ADC0 00D3  
                __pmaintext 0507                  __pintentry 0004                     ?_getche 0070  
                   _CCP1CON 0293                   ?___altoft 0020                   ?___ftpack 0072  
                   ?_printf 002F                     _OSCTUNE 0098                     _REC_int 0004  
                   _SSP1ADD 0212                     _SSP1BUF 0211                     _RXDTSEL 08EF  
                   _TXCKSEL 08EA  __size_of_update_duty_cycle 0036                     ___lldiv 04B4  
                   ___ftmul 0227                     ___llmod 0550                     ___fttol 0362  
           __size_of_getche 0002                  ??___altoft 0024            ?_init_pic12f1840 0070  
                ??___ftpack 0077                     __ptext1 0154                     __ptext2 05D0  
                   __ptext3 0041                     __ptext4 0606                     __ptext5 0550  
                   __ptext6 04B4                     __ptext7 0362                     __ptext8 0227  
                   __ptext9 0593           __end_of_read_ADC0 0227             __size_of_printf 0113  
                   _dpowers 02DB                     _rcv_str 0057                     clrloop0 060F  
      end_of_initialization 003D             ___lldiv@divisor 0072             ___lldiv@counter 0024  
                   printf@c 0045                     printf@f 002F                __pstringtext 02DB  
       read_ADC0@high_count 004B            __CFG_FOSC$INTOSC 0000                 ___ftmul@exp 0032  
            __end_of_getche 0616         read_ADC0@duty_cycle 0051              __end_of_printf 0154  
       start_initialization 0035                  read_ADC0@i 0047             ___llmod@divisor 0025  
           ___llmod@counter 002E                    ??_getche 0072                    ??_printf 0037  
         __size_of___altoft 003D           __size_of___ftpack 0064                 __pbssCOMMON 007B  
                 ___latbits 0001               __pcstackBANK0 0020                    ?_REC_int 0070  
                  ?___lldiv 0072                    ?___ftmul 0028                    ?___llmod 0025  
                  ?___fttol 0038                   _read_ADC0 0154              __size_of_putch 0008  
         _got_serial_string 0065                   clear_ram0 060E                _recieve_char 0068  
                _ADCON0bits 009D                  printf@flag 003F                  printf@prec 003D  
                ?_read_ADC0 0070    __size_of_init_pic12f1840 0067            __size_of_REC_int 002F  
          init_pic12f1840@f 0073            __size_of___lldiv 0053                    ___altoft 0593  
          __size_of___ftmul 00B4            __size_of___llmod 0043            __size_of___fttol 0087  
                  ___ftpack 0450                    __ptext10 0450                    __ptext11 03E9  
                  __ptext12 0614               __size_of_main 0049                    int$flags 007E  
                 printf@val 0041                   putch@data 0072                 ??_read_ADC0 0046  
                  intlevel1 0000           ??_init_pic12f1840 0072            ___lldiv@dividend 0076  
         __CFG_CLKOUTEN$OFF 0000                    printf@ap 0040            ___lldiv@quotient 0020  
